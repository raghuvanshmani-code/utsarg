/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and open read access for other collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Access is restricted to the owning user.
 * - /society/meta: Singleton document containing society metadata. Publicly readable.
 * - /clubs/{clubId}: Stores information about clubs. Publicly readable.
 * - /volunteers/{volunteerId}: Stores volunteer profiles. Publicly readable.
 * - /members/{memberId}: Stores member profiles. Publicly readable.
 * - /events/{eventId}: Stores event details. Publicly readable.
 * - /gallery/{galleryId}: Stores gallery media items. Publicly readable.
 * - /funds/accounting/transactions/{transactionId}: Logs financial transactions. Publicly readable.
 * - /philanthropy/{activityId}: Records philanthropic activities. Publicly readable.
 * - /blog/{blogPostId}: Stores blog posts. Currently missing security rules, but will be configured to allow only authenticated users to create posts.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible/modifiable by the owning user.
 * - Other collections (clubs, events, gallery, etc.) are publicly readable.
 * - Write access to all non-user collections is disabled, pending further access control definition.
 * - Listing of documents is generally allowed where reading is allowed, except where explicitly denied.
 *
 * Denormalization for Authorization:
 * - No denormalization is currently used. Future rules may denormalize role information onto documents.
 *
 * Structural Segregation:
 * - Public vs. private data is segregated by collection (e.g., user profiles vs. public content).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document, based on the userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes, ensuring the document exists before deletion or updates.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile (userId matches auth.uid).
     * @allow (get, list) - Authenticated user reads their own profile.
     * @allow (update) - Authenticated user updates their own profile.
     * @allow (delete) - Authenticated user deletes their own profile.
     * @deny (create) - Authenticated user attempts to create a profile for another user (userId does not match auth.uid).
     * @deny (get, list) - Authenticated user attempts to read another user's profile.
     * @deny (update) - Authenticated user attempts to update another user's profile.
     * @deny (delete) - Authenticated user attempts to delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to society metadata. Write access is disabled.
     * @path /society/meta
     * @allow (get, list) - Any user can read the society metadata.
     * @deny (create, update, delete) - No user can create, update, or delete the society metadata.
     * @principle Allows public read access with no write access.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to club information. Write access is disabled.
     * @path /clubs/{clubId}
     * @allow (get, list) - Any user can read club information.
     * @deny (create, update, delete) - No user can create, update, or delete club information.
     * @principle Allows public read access with no write access.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to volunteer profiles. Write access is disabled.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) - Any user can read volunteer profiles.
     * @deny (create, update, delete) - No user can create, update, or delete volunteer profiles.
     * @principle Allows public read access with no write access.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to member profiles. Write access is disabled.
     * @path /members/{memberId}
     * @allow (get, list) - Any user can read member profiles.
     * @deny (create, update, delete) - No user can create, update, or delete member profiles.
     * @principle Allows public read access with no write access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to event details. Write access is disabled.
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read event details.
     * @deny (create, update, delete) - No user can create, update, or delete event details.
     * @principle Allows public read access with no write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to gallery media items. Write access is disabled.
     * @path /gallery/{galleryId}
     * @allow (get, list) - Any user can read gallery media items.
     * @deny (create, update, delete) - No user can create, update, or delete gallery media items.
     * @principle Allows public read access with no write access.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to financial transaction logs. Write access is disabled.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get, list) - Any user can read financial transaction logs.
     * @deny (create, update, delete) - No user can create, update, or delete financial transaction logs.
     * @principle Allows public read access with no write access.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to philanthropy activity records. Write access is disabled.
     * @path /philanthropy/{activityId}
     * @allow (get, list) - Any user can read philanthropy activity records.
     * @deny (create, update, delete) - No user can create, update, or delete philanthropy activity records.
     * @principle Allows public read access with no write access.
     */
    match /philanthropy/{activityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any signed-in user to create a blog post. Read access is public.
     * @path /blog/{blogPostId}
     * @allow (create) - Any signed-in user can create a blog post.
     * @allow (get, list) - Any user can read blog posts.
     * @deny (update, delete) - No user can update or delete blog posts (further access control to be defined).
     * @principle Allows public read access with signed-in users able to create
     */
    match /blog/{blogPostId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}