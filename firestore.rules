rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles, allowing only the authenticated user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create profile at /users/user123
     * @allow (get, update, delete) User with uid 'user123' can get, update, delete profile at /users/user123
     * @deny (create) User with uid 'user456' cannot create profile at /users/user123
     * @deny (get, update, delete) User with uid 'user456' cannot get, update, delete profile at /users/user123
     * @principle Enforces strict user-ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing user profiles.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Allows public read access to the society metadata document.
     * @path /society/meta
     * @allow (get, list) Any user, signed in or not, can read the society metadata.
     * @deny (create, update, delete) No one can create, update, or delete the society metadata through client-side rules.
     * @principle Provides public read access to general society information while restricting write access.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if false; // Only writeable via trusted backend.
    }

    /**
     * @description Allows public read access to club information. Write access needs to be secured by owner.
     * @path /clubs/{clubId}
     * @allow (get, list) Any user, signed in or not, can read club information.
     * @deny (create, update, delete) No one can create, update, or delete club information without proper authorization.
     * @principle Provides public read access to club information while restricting write access to authorized users.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update: if request.auth != null && resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

        /**
     * @description Allows public read access to volunteer profiles. Write access needs to be secured by owner.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) Any user, signed in or not, can read volunteer profiles.
     * @deny (create, update, delete) No one can create, update, or delete volunteer profiles without proper authorization.
     * @principle Provides public read access to volunteer profiles while restricting write access to authorized users.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update: if request.auth != null && resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    /**
     * @description Allows public read access to member profiles. Write access needs to be secured by owner.
     * @path /members/{memberId}
     * @allow (get, list) Any user, signed in or not, can read member profiles.
     * @deny (create, update, delete) No one can create, update, or delete member profiles without proper authorization.
     * @principle Provides public read access to member profiles while restricting write access to authorized users.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update: if request.auth != null && resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    /**
     * @description Allows public read access to event details. Write access needs to be secured by owner.
     * @path /events/{eventId}
     * @allow (get, list) Any user, signed in or not, can read event details.
     * @deny (create, update, delete) No one can create, update, or delete event details without proper authorization.
     * @principle Provides public read access to event details while restricting write access to authorized users.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update: if request.auth != null && resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    /**
     * @description Allows public read access to gallery media items. Write access needs to be secured by owner.
     * @path /gallery/{galleryId}
     * @allow (get, list) Any user, signed in or not, can read gallery media items.
     * @deny (create, update, delete) No one can create, update, or delete gallery media items without proper authorization.
     * @principle Provides public read access to gallery media items while restricting write access to authorized users.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update: if request.auth != null && resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    /**
     * @description Restricts access to financial transactions based on the signatories.
     * @path /funds/accounting/transactions/{transactionId}
     */
    match /funds/accounting/transactions/{transactionId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isSignatory(signatories) {
          return signatories.hasAny([request.auth.uid]);
      }
      allow get, list: if false;
      allow create: if isSignedIn() && request.resource.data.signatories.hasAny([request.auth.uid]);
      allow update: if isSignedIn() && resource.data.signatories.hasAny([request.auth.uid]);
      allow delete: if false; // Deletion is not generally allowed for audit trail purposes
    }

    /**
     * @description Allows public read access to philanthropy activity records. Write access needs to be secured by owner.
     * @path /philanthropy/{activityId}
     * @allow (get, list) Any user, signed in or not, can read philanthropy activity records.
     * @deny (create, update, delete) No one can create, update, or delete philanthropy activity records without proper authorization.
     * @principle Provides public read access to philanthropy activity records while restricting write access to authorized users.
     */
    match /philanthropy/{activityId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update: if request.auth != null && resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }
  }
}