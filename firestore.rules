/**
<<<<<<< HEAD
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              allows public read access to club, event, gallery, and philanthropy data,
 *              and restricts write access to owners or authorized users. The society
 *              metadata document is read-only for all users but cannot be modified through the client.
 *
 * @dataStructure
 *  - /users/{userId}: User profile information.
 *  - /society/meta: Society-wide metadata.
 *  - /clubs/{clubId}: Information about individual clubs.
 *  - /volunteers/{volunteerId}: Volunteer profiles.
 *  - /members/{memberId}: General member profiles.
 *  - /events/{eventId}: Club event details.
 *  - /gallery/{galleryId}: Media items for the gallery.
 *  - /funds/accounting/transactions/{transactionId}: Financial transactions.
 *  - /philanthropy/{activityId}: Philanthropic activity records.
 *
 * @keySecurityDecisions
 *  - User profiles are strictly owned by the user with matching UID.
 *  - The /society/meta document is publicly readable, but not writable through the client.
 *  - Public read access to clubs, events, gallery items and philanthropy activities is granted for all users.
 *  - Write access to clubs, events, gallery items and philanthropy activities is restricted to authenticated users.
 *
 * @denormalizationForAuthorization
 *  - For public read collections, documents should contain an `ownerId` or `authorId` field
 *    to enable owner-only writes.  However, these are not yet implemented (see TODOs).
 *
 * @structuralSegregation
 *  - Public vs. private data is managed through different top-level collections
 *    (e.g., user profiles in `/users/{userId}` vs. public gallery items in `/gallery/{galleryId}`).
=======
 * @fileoverview Firestore Security Rules for the Student Society App.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access by enforcing strict ownership for user-specific data
 * and leveraging custom claims for administrative roles. It avoids complex queries in the rules by
 * assuming a degree of client-side data validation, focusing on authorization. Data shape validation is relaxed to prioritize rapid iteration.
 *
 * Data Structure:
 * - `/users/{userId}`: User profiles, accessible only to the owning user and admins.
 * - `/society/meta`: Public metadata about the society.
 * - `/clubs/{clubId}`: Club data, publicly readable, writable by admins only.
 * - `/volunteers/{volunteerId}`: Volunteer profiles, publicly readable, writable by admins only.
 * - `/members/{memberId}`: Member profiles, publicly readable, writable by admins only.
 * - `/events/{eventId}`: Event data, publicly readable, writable by admins only.
 * - `/gallery/{galleryId}`: Gallery items, publicly readable, writable by admins only.
 * - `/funds/accounting/transactions/{transactionId}`: Financial transaction logs, readable only by admins.
 * - `/philanthropy/{activityId}`: Philanthropy activity records, publicly readable, writable by admins only.
 * - `/adminLogs/{logId}`: Logs of admin activity, readable only by admins.
 *
 * Key Security Decisions:
 * - User profiles are private, accessible only to the user themselves and admins.
 * - Society metadata is public.
 * - Other top-level collections are publicly readable, but writable only by admins.
 * - No user listing is allowed for `users` collection.
 * - Admin status is determined by a custom claim on the user's auth token.
>>>>>>> 847dc3dbfa16b6947aac7e277ff672d0eb0733bb
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
<<<<<<< HEAD
     * @description Manages access to user profile documents. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     *   - `request.auth.uid` = "user123", Document ID = "user123"
     * @allow (get, list) - Authenticated user reads their own profile.
     *   - `request.auth.uid` = "user123", Document ID = "user123"
     * @allow (update, delete) - Authenticated user updates/deletes their own profile.
     *   - `request.auth.uid` = "user123", Document ID = "user123"
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched ID.
     *   - `request.auth.uid` = "user123", Document ID = "user456"
     * @deny (get, list) - Authenticated user attempts to read another user's profile.
     *   - `request.auth.uid` = "user123", Document ID = "user456"
     * @deny (update, delete) - Authenticated user attempts to update/delete another user's profile.
     *   - `request.auth.uid` = "user123", Document ID = "user456"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls read access to the society metadata. Anyone can read, but only the backend can write.
     * @path /society/meta
     * @allow (get, list) - Any user can read the society metadata.
     *   - No authentication required.
     * @deny (create, update, delete) - No client-side writes are allowed.
     *   - All write requests are denied.
     * @principle Provides public read access but restricts write access.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to club documents. Allows public read access, but restricts write access to authenticated users (TODO: owner-only writes).
     * @path /clubs/{clubId}
     * @allow (get, list) - Any user can read the club information.
     *   - No authentication required.
     * @allow (create) - Authenticated user can create a new club document.
     *   - `request.auth.uid` is authenticated.
     * @allow (update, delete) - Authenticated user can update/delete a club document (TODO: owner-only).
     *   - `request.auth.uid` is authenticated.
     * @deny (create) - Unauthenticated user attempts to create a club.
     *   - `request.auth == null`
     * @deny (update, delete) - Unauthenticated user attempts to update/delete a club.
     *   - `request.auth == null`
     * @principle Provides public read access but requires authentication for writes.
     */
    match /clubs/{clubId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to volunteer profiles. Allows public read access, but restricts write access to authenticated users (TODO: owner-only writes).
     * @path /volunteers/{volunteerId}
     * @allow (get, list) - Any user can read the volunteer profiles.
     *   - No authentication required.
     * @allow (create) - Authenticated user can create a new volunteer profile.
     *   - `request.auth.uid` is authenticated.
     * @allow (update, delete) - Authenticated user can update/delete a volunteer profile (TODO: owner-only).
     *   - `request.auth.uid` is authenticated.
     * @deny (create) - Unauthenticated user attempts to create a volunteer.
     *   - `request.auth == null`
     * @deny (update, delete) - Unauthenticated user attempts to update/delete a volunteer.
     *   - `request.auth == null`
     * @principle Provides public read access but requires authentication for writes.
     */
    match /volunteers/{volunteerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to member profiles. Allows public read access, but restricts write access to authenticated users (TODO: owner-only writes).
     * @path /members/{memberId}
     * @allow (get, list) - Any user can read the member profiles.
     *   - No authentication required.
     * @allow (create) - Authenticated user can create a new member profile.
     *   - `request.auth.uid` is authenticated.
     * @allow (update, delete) - Authenticated user can update/delete a member profile (TODO: owner-only).
     *   - `request.auth.uid` is authenticated.
     * @deny (create) - Unauthenticated user attempts to create a member.
     *   - `request.auth == null`
     * @deny (update, delete) - Unauthenticated user attempts to update/delete a member.
     *   - `request.auth == null`
     * @principle Provides public read access but requires authentication for writes.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to event documents. Allows public read access, but restricts write access to authenticated users (TODO: owner-only writes).
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read the event details.
     *   - No authentication required.
     * @allow (create) - Authenticated user can create a new event document.
     *   - `request.auth.uid` is authenticated.
     * @allow (update, delete) - Authenticated user can update/delete an event document (TODO: owner-only).
     *   - `request.auth.uid` is authenticated.
     * @deny (create) - Unauthenticated user attempts to create an event.
     *   - `request.auth == null`
     * @deny (update, delete) - Unauthenticated user attempts to update/delete an event.
     *   - `request.auth == null`
     * @principle Provides public read access but requires authentication for writes.
     */
    match /events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to gallery items. Allows public read access, but restricts write access to authenticated users (TODO: owner-only writes).
     * @path /gallery/{galleryId}
     * @allow (get, list) - Any user can read the gallery items.
     *   - No authentication required.
     * @allow (create) - Authenticated user can create a new gallery item.
     *   - `request.auth.uid` is authenticated.
     * @allow (update, delete) - Authenticated user can update/delete a gallery item (TODO: owner-only).
     *   - `request.auth.uid` is authenticated.
     * @deny (create) - Unauthenticated user attempts to create a gallery item.
     *   - `request.auth == null`
     * @deny (update, delete) - Unauthenticated user attempts to update/delete a gallery item.
     *   - `request.auth == null`
     * @principle Provides public read access but requires authentication for writes.
     */
    match /gallery/{galleryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to fund transactions. Allows public read access, but restricts write access to authenticated users (TODO: owner-only writes).
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get, list) - Any user can read the fund transactions.
     *   - No authentication required.
     * @allow (create) - Authenticated user can create a new fund transaction.
     *   - `request.auth.uid` is authenticated.
     * @allow (update, delete) - Authenticated user can update/delete a fund transaction (TODO: owner-only).
     *   - `request.auth.uid` is authenticated.
     * @deny (create) - Unauthenticated user attempts to create a fund transaction.
     *   - `request.auth == null`
     * @deny (update, delete) - Unauthenticated user attempts to update/delete a fund transaction.
     *   - `request.auth == null`
     * @principle Provides public read access but requires authentication for writes.
     */
    match /funds/accounting/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to philanthropy activities. Allows public read access, but restricts write access to authenticated users (TODO: owner-only writes).
     * @path /philanthropy/{activityId}
     * @allow (get, list) - Any user can read the philanthropy activities.
     *   - No authentication required.
     * @allow (create) - Authenticated user can create a new philanthropy activity.
     *   - `request.auth.uid` is authenticated.
     * @allow (update, delete) - Authenticated user can update/delete a philanthropy activity (TODO: owner-only).
     *   - `request.auth.uid` is authenticated.
     * @deny (create) - Unauthenticated user attempts to create a philanthropy activity.
     *   - `request.auth == null`
     * @deny (update, delete) - Unauthenticated user attempts to update/delete a philanthropy activity.
     *   - `request.auth == null`
     * @principle Provides public read access but requires authentication for writes.
     */
    match /philanthropy/{activityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
=======
     * @description Checks if the user is signed in.
     * @param userId The user ID to check against.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param userId The user ID to check against.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' custom claim.
     * @return True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    /**
     * @description Stores public-facing user profiles.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their own profile.
     * @allow (get, update, delete) - User with matching UID can read, update, and delete their own profile. Admins can also get, update and delete.
     * @deny (list) - Listing users is not allowed.
     * @deny (create) - Non-authenticated user cannot create user
     * @deny (update, delete) - Non-authenticated user cannot update/delete user
     * @deny (create) - Users cannot create profiles for other users.
     * @principle Enforces document ownership for writes, restricts listing of users, allows admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Singleton document for society-wide metadata.
     * @path /society/meta
     * @allow (get, list) - Anyone can read the society metadata.
     * @allow (create, update, delete) - Only admins can modify the society metadata.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /society/meta {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores information about individual student clubs.
     * @path /clubs/{clubId}
     * @allow (get, list) - Anyone can read the club information.
     * @allow (create, update, delete) - Only admins can create, update, or delete club information.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Profiles for student volunteers.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) - Anyone can read the volunteer profiles.
     * @allow (create, update, delete) - Only admins can create, update, or delete volunteer profiles.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Profiles for general members.
     * @path /members/{memberId}
     * @allow (get, list) - Anyone can read the member profiles.
     * @allow (create, update, delete) - Only admins can create, update, or delete member profiles.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Details about club events.
     * @path /events/{eventId}
     * @allow (get, list) - Anyone can read the event details.
     * @allow (create, update, delete) - Only admins can create, update, or delete event details.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Collection of all media items for the main gallery.
     * @path /gallery/{galleryId}
     * @allow (get, list) - Anyone can read the gallery items.
     * @allow (create, update, delete) - Only admins can create, update, or delete gallery items.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Logs all financial transactions.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get, list) - Only admins can read financial transactions.
     * @allow create, update, delete: if false;
     * @principle Restricts access to financial transaction logs to admins only.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get, list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Records of philanthropic activities.
     * @path /philanthropy/{activityId}
     * @allow (get, list) - Anyone can read the philanthropic activity records.
     * @allow (create, update, delete) - Only admins can create, update, or delete philanthropic activity records.
     * @principle Allows public read access, restricts write access to admins.
     */
    match /philanthropy/{activityId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Logs of admin activity. Only readable by admins.
     * @path /adminLogs/{logId}
     * @allow (get, list) - Only admins can read these logs.
     * @allow create, update, delete: if false;
     * @principle Restricts access to admin logs to admins only.
     */
    match /adminLogs/{logId} {
      allow get, list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
>>>>>>> 847dc3dbfa16b6947aac7e277ff672d0eb0733bb
    }
  }
}