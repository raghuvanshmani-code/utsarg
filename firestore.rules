/**
 * @fileoverview Firestore Security Rules for the Student Society App.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-based access control model.
 * Users generally have full control over their own data, while public data is readable by everyone.
 * Administrative actions are logged and can potentially be restricted to users with specific custom claims (not yet implemented).
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Society-wide metadata is stored in a singleton document at `/society/meta`.
 * - Clubs, volunteers, members, events, gallery items, fund transactions, philanthropy activities, and admin logs
 *   are stored in their respective top-level collections.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed for privacy.
 * - Write operations are strictly controlled based on ownership.
 * - The rules do not enforce data validation beyond authorization and relational integrity checks in `create` operations.
 * - There is no role-based access control yet.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with uid 'user123' can create their own profile at /users/user123.
     * @allow (get, update, delete) - User with uid 'user123' can access their own profile at /users/user123.
     * @deny (create, update, delete) - User with uid 'user456' cannot access profile at /users/user123.
     * @deny (list) - No user can list all user profiles.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to the society metadata. Anyone can read it, but only authorized users can modify it (currently open for prototyping).
     * @path /society/meta
     * @allow (get, list) - Any user can read society metadata.
     * @allow (create, update, delete) - No user can create, update or delete the society metadata.
     * @principle Allows public read access but restricts write access.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to club information. Currently open read and protected writes.
     * @path /clubs/{clubId}
     * @allow (get, list) - Any user can read club information.
     * @allow (create, update, delete) - No user can create, update or delete club information.
     * @principle Public read, restricted write based on an ownership field.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to volunteer profiles.  Currently open read and protected writes.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) - Any user can read volunteer profiles.
     * @allow (create, update, delete) - No user can create, update or delete volunteer profiles.
     * @principle Public read, restricted write based on an ownership field.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to member profiles. Currently open read and protected writes.
     * @path /members/{memberId}
     * @allow (get, list) - Any user can read member profiles.
     * @allow (create, update, delete) - No user can create, update or delete member profiles.
     * @principle Public read, restricted write based on an ownership field.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to event details.  Currently open read and protected writes.
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read event details.
     * @allow (create, update, delete) - No user can create, update or delete event details.
     * @principle Public read, restricted write based on an ownership field.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to gallery items.  Currently open read and protected writes.
     * @path /gallery/{galleryId}
     * @allow (get, list) - Any user can read gallery items.
     * @allow (create, update, delete) - No user can create, update or delete gallery items.
     * @principle Public read, restricted write based on an ownership field.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to fund transactions.  Currently open read and protected writes.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get, list) - Any user can read fund transactions.
     * @allow (create, update, delete) - No user can create, update or delete fund transactions.
     * @principle Public read, restricted write based on an ownership field.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to philanthropy activities.  Currently open read and protected writes.
     * @path /philanthropy/{activityId}
     * @allow (get, list) - Any user can read philanthropy activities.
     * @allow (create, update, delete) - No user can create, update or delete philanthropy activities.
     * @principle Public read, restricted write based on an ownership field.
     */
    match /philanthropy/{activityId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to admin activity logs. Currently, only admins can read the logs.
     * @path /admin_logs/{logId}
     * @allow (get, list) - Any user can read admin activity logs.
     * @allow (create, update, delete) - No user can create, update or delete admin activity logs.
     * @principle Restricted access to admin users.
     */
    match /admin_logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}