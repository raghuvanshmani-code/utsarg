/**
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              allows public read access to most collections, and restricts write access
 *              based on ownership or prevents it entirely for certain collections.
 *              It prioritizes simplicity and security with explicit deny rules.
 *
 * @dataStructure
 *              - /users/{userId}: Stores individual user profiles, accessible only by the user.
 *              - /society/meta: Singleton document containing society metadata, publicly readable.
 *              - /clubs/{clubId}: Stores club information, publicly readable.
 *              - /volunteers/{volunteerId}: Stores volunteer profiles, publicly readable.
 *              - /members/{memberId}: Stores member profiles, publicly readable.
 *              - /events/{eventId}: Stores event details, publicly readable.
 *              - /gallery/{galleryId}: Stores gallery media items, publicly readable.
 *              - /funds/accounting/transactions/{transactionId}: Logs financial transactions, write access is denied.
 *              - /philanthropy/{activityId}: Records philanthropic activities, publicly readable.
 *
 * @keySecurityDecisions
 *              - User profiles are strictly owned by the user; only the authenticated user can read or write their own profile.
 *              - Society metadata is publicly readable but cannot be modified through the client.
 *              - Most collections are publicly readable, allowing for open data consumption.
 *              - Financial transactions are strictly controlled; direct client writes are not permitted.
 *              - Listing of user documents is disallowed for privacy.
 *              - No schema validation is performed beyond ownership checks.
 *
 * @denormalizationForAuthorization N/A
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants the user full ownership over their profile. Only the authenticated user
     *              can read, create, update, or delete their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with uid 'user_abc' creates a profile document at /users/user_abc with matching uid in the data.
     * @allow (get, update, delete) - User with uid 'user_abc' reads, updates, or deletes the profile document at /users/user_abc.
     * @deny (create) - User with uid 'user_abc' attempts to create a profile document at /users/user_xyz.
     * @deny (update, delete) - User with uid 'user_xyz' attempts to update or delete the profile document at /users/user_abc.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to society metadata while preventing any client-side modifications.
     * @path /society/meta
     * @allow (get, list) - Any user, authenticated or not, can read the society metadata.
     * @deny (create, update, delete) - No user can create, update, or delete the society metadata.
     * @principle Public read access for general information; write access is explicitly denied to prevent unauthorized changes.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the club data, but prevents any client-side modifications.
     * @path /clubs/{clubId}
     * @allow (get, list) - Any user, authenticated or not, can read the club data.
     * @deny (create, update, delete) - No user can create, update, or delete club data.
     * @principle Public read access for club information; write access is explicitly denied to prevent unauthorized changes.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the volunteer profiles, but prevents any client-side modifications.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) - Any user, authenticated or not, can read the volunteer profiles.
     * @deny (create, update, delete) - No user can create, update, or delete volunteer profiles.
     * @principle Public read access for volunteer profiles; write access is explicitly denied to prevent unauthorized changes.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the member profiles, but prevents any client-side modifications.
     * @path /members/{memberId}
     * @allow (get, list) - Any user, authenticated or not, can read the member profiles.
     * @deny (create, update, delete) - No user can create, update, or delete member profiles.
     * @principle Public read access for member profiles; write access is explicitly denied to prevent unauthorized changes.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the event details, but prevents any client-side modifications.
     * @path /events/{eventId}
     * @allow (get, list) - Any user, authenticated or not, can read the event details.
     * @deny (create, update, delete) - No user can create, update, or delete event details.
     * @principle Public read access for event details; write access is explicitly denied to prevent unauthorized changes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the gallery media items, but prevents any client-side modifications.
     * @path /gallery/{galleryId}
     * @allow (get, list) - Any user, authenticated or not, can read the gallery media items.
     * @deny (create, update, delete) - No user can create, update, or delete gallery media items.
     * @principle Public read access for gallery media items; write access is explicitly denied to prevent unauthorized changes.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Prevents any client-side access to financial transaction logs.
     * @path /funds/accounting/transactions/{transactionId}
     * @deny (get, list, create, update, delete) - No user can access the financial transaction logs.
     * @principle Restricts all access to financial data to prevent unauthorized viewing or modifications.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read the philanthropy activity records, but prevents any client-side modifications.
     * @path /philanthropy/{activityId}
     * @allow (get, list) - Any user, authenticated or not, can read the philanthropy activity records.
     * @deny (create, update, delete) - No user can create, update, or delete philanthropy activity records.
     * @principle Public read access for philanthropy activity records; write access is explicitly denied to prevent unauthorized changes.
     */
    match /philanthropy/{activityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}