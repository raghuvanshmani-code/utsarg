/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user profiles and restricts access to other collections based on the documented requirements.
 *
 * @data-structure
 * - `/users/{userId}`: Stores public user profile data. Each user can only read/write their own profile.
 * - `/society/meta`:  A singleton document with public read access.
 * - `/clubs/{clubId}`, `/volunteers/{volunteerId}`, `/members/{memberId}`, `/events/{eventId}`, `/gallery/{galleryId}`, `/funds/accounting/transactions/{transactionId}`, `/philanthropy/{activityId}`, `/admin_logs/{logId}`:  Public read, owner-only write, assuming an ownership field exists.
 *
 * @key-security-decisions
 * - User listing is explicitly denied for the `/users` collection to protect user privacy and prevent enumeration attacks.
 * - All write operations require a valid, authenticated user.
 * - Data validation is relaxed in this prototype phase, focusing on authorization and relational integrity only.
 * - If an ownership field is missing in a schema, a `TODO` is added to the rule, indicating a required schema update.
 * - No timestamp validation is performed in this prototype phase.
 *
 * @denormalization-for-authorization
 * - The `uploadedBy` field on `galleryItem` and `clubId` on `event` are used to denote ownership, avoiding the need for separate role or membership collections.
 *
 * @structural-segregation
 * - No explicit structural segregation is used in this configuration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile. `request.auth.uid` must match `{userId}` and the `uid` field in the data.
     * @allow (get,update,delete) - Authenticated user can read, update, and delete their own profile.
     * @deny (list) - Prevents listing all user profiles.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (update,delete) - An authenticated user cannot modify another user's profile.
     * @principle Enforces document ownership and prevents unauthorized access to user data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && request.auth.uid == resource.data.uid;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Explicitly prevent listing all users.
      allow create: if isOwner(userId) && request.auth.uid == request.resource.data.uid;
      allow update: if isOwner(userId) && request.auth.uid == resource.data.uid;
      allow delete: if isOwner(userId) && request.auth.uid == resource.data.uid;
    }

    /**
     * @description Controls access to the society metadata singleton document.
     * @path /society/meta
     * @allow (get, list) - Any user can read the society metadata.
     * @deny (create, update, delete) - No one can create, update, or delete the society metadata through client-side rules.
     * @principle Public read access with restricted write access.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to club documents.
     * @path /clubs/{clubId}
     * @allow (get, list) - Any user can read the club information.
     * @allow (create) - Authenticated user can create a new club document only if ownership field is equal to their user id.
     * @allow (update, delete) - Only the owner of the club can update or delete it.
     * @deny (create, update, delete) - Writes require authentication and proper ownership.
     * @principle Public read with owner-only writes.
     */
    match /clubs/{clubId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clubId) {
        return request.auth.uid == resource.data.ownerUid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    /**
     * @description Controls access to volunteer documents.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) - Any user can read the volunteer information.
     * @allow (create) - Authenticated user can create a new volunteer document only if ownership field is equal to their user id.
     * @allow (update, delete) - Only the owner of the volunteer can update or delete it.
     * @deny (create, update, delete) - Writes require authentication and proper ownership.
     * @principle Public read with owner-only writes.
     */
    match /volunteers/{volunteerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(volunteerId) {
        return request.auth.uid == resource.data.ownerUid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    /**
     * @description Controls access to member documents.
     * @path /members/{memberId}
     * @allow (get, list) - Any user can read the member information.
     * @allow (create) - Authenticated user can create a new member document only if ownership field is equal to their user id.
     * @allow (update, delete) - Only the owner of the member can update or delete it.
     * @deny (create, update, delete) - Writes require authentication and proper ownership.
     * @principle Public read with owner-only writes.
     */
    match /members/{memberId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(memberId) {
        return request.auth.uid == resource.data.ownerUid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    /**
     * @description Controls access to event documents.
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read the event information.
     * @allow (create) - Authenticated user can create a new event document only if the clubId field matches their user id.
     * @allow (update, delete) - Only the owner of the event (based on clubId) can update or delete it.
     * @deny (create, update, delete) - Writes require authentication and proper ownership.
     * @principle Public read with owner-only writes.
     */
    match /events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isOwner(eventId) {
        return request.auth.uid == resource.data.clubId;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.clubId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.clubId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.clubId == request.auth.uid;
    }

    /**
     * @description Controls access to gallery item documents.
     * @path /gallery/{galleryId}
     * @allow (get, list) - Any user can read the gallery item information.
     * @allow (create) - Authenticated user can create a new gallery item document only if the uploadedBy field matches their user id.
     * @allow (update, delete) - Only the owner of the gallery item (based on uploadedBy) can update or delete it.
     * @deny (create, update, delete) - Writes require authentication and proper ownership.
     */
    match /gallery/{galleryId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isOwner(galleryId) {
        return request.auth.uid == resource.data.uploadedBy;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.uploadedBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.uploadedBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.uploadedBy == request.auth.uid;
    }

    /**
     * @description Controls access to fund transaction documents.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get, list) - Any user can read the fund transaction information.
     * @allow (create) - Authenticated user can create a new fund transaction document only if ownership field is equal to their user id.
     * @allow (update, delete) - Only the owner of the fund transaction can update or delete it.
     * @deny (create, update, delete) - Writes require authentication and proper ownership.
     * @principle Public read with owner-only writes.
     */
    match /funds/accounting/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isOwner(transactionId) {
        return request.auth.uid == resource.data.ownerUid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    /**
     * @description Controls access to philanthropy activity documents.
     * @path /philanthropy/{activityId}
     * @allow (get, list) - Any user can read the philanthropy activity information.
     * @allow (create) - Authenticated user can create a new philanthropy activity document only if ownership field is equal to their user id.
     * @allow (update, delete) - Only the owner of the philanthropy activity can update or delete it.
     * @deny (create, update, delete) - Writes require authentication and proper ownership.
     * @principle Public read with owner-only writes.
     */
    match /philanthropy/{activityId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isOwner(activityId) {
        return request.auth.uid == resource.data.ownerUid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }

    /**
     * @description Controls access to admin activity log documents.
     * @path /admin_logs/{logId}
     * @allow (get, list) - Any user can read the admin activity log information.
     * @allow (create) - Authenticated user can create a new admin activity log document only if ownership field is equal to their user id.
     * @allow (update, delete) - Only the owner of the admin activity log can update or delete it.
     * @deny (create, update, delete) - Writes require authentication and proper ownership.
     * @principle Public read with owner-only writes.
     */
    match /admin_logs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }
       function isOwner(logId) {
        return request.auth.uid == resource.data.ownerUid;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerUid == request.auth.uid;
      allow update: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.ownerUid == request.auth.uid;
    }
  }
}