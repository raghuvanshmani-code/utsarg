/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed security model:
 *   - Public Read, Owner-Write: Applies to general content like blog posts and gallery items.
 *   - Authenticated Read/Write: Applies to public documents under /publicDocs/**.
 *   - Admin-Only Access: Applies to everything under /admin/**.
 *   - Owner-Only: Applies to user profiles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /clubs/{clubId}: Stores club information. Publicly readable, writeable by club leaders (not yet implemented).
 * - /events/{eventId}: Stores event details. Publicly readable, writeable by event organizers (not yet implemented).
 * - /gallery/{galleryId}: Stores gallery items. Publicly readable, writeable by authorized users (not yet implemented).
 * - /blog/{blogId}: Stores blog posts. Publicly readable, writeable by authorized users (not yet implemented).
 * - /publicDocs/{docId}: Documents with public read and authenticated write access.
 * - /admin/{docId}: Documents accessible only by users with the 'admin' custom claim.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied (no `list` rule on `/users`).
 * - Read-only collections are handled by `allow get, list: if true;`.
 * - Ambiguous relationships default to strict owner-only access.
 * - The rules do not enforce the data types of the firestore entries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read/write for authenticated users on /publicDocs/**.
     * @path /publicDocs/{document}
     * @allow (read) authenticated user
     * @allow (write) authenticated user
     * @deny (read) unauthenticated user
     * @deny (write) unauthenticated user
     * @principle Authenticated users can read and write to public documents.
     */
    match /publicDocs/{document=**} {
      allow read, write: if isSignedIn();
    }

    /**
     * @description Allows admin-only access on /admin/** (based on custom claim `admin:true`).
     * @path /admin/{document}
     * @allow (read) user with custom claim `admin:true`
     * @allow (write) user with custom claim `admin:true`
     * @deny (read) user without custom claim `admin:true`
     * @deny (write) user without custom claim `admin:true`
     * @principle Only admins can read and write to admin documents.
     */
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Manages access to user profiles.
     * @path /users/{userId}
     * @allow (get) owner
     * @allow (create) owner
     * @allow (update) owner
     * @allow (delete) owner
     * @deny (get) non-owner
     * @deny (create) non-owner
     * @deny (update) non-owner
     * @deny (delete) non-owner
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed

      // Allow the user to create their own profile, but no one else's
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // The request.resource.data variable on an update represents the state
      // of the document AFTER the update. Thus, we can enforce immutability.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to club information.
     * @path /clubs/{clubId}
     * @allow (get) public
     * @allow (list) public
     * @deny (create) not yet implemented
     * @deny (update) not yet implemented
     * @deny (delete) not yet implemented
     * @principle Allows public read access, but writes are restricted (not yet implemented).
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add club leader validation
    }

    /**
     * @description Manages access to event details.
     * @path /events/{eventId}
     * @allow (get) public
     * @allow (list) public
     * @deny (create) not yet implemented
     * @deny (update) not yet implemented
     * @deny (delete) not yet implemented
     * @principle Allows public read access, but writes are restricted (not yet implemented).
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add event organizer validation
    }

    /**
     * @description Manages access to gallery media items.
     * @path /gallery/{galleryId}
     * @allow (get) public
     * @allow (list) public
     * @deny (create) not yet implemented
     * @deny (update) not yet implemented
     * @deny (delete) not yet implemented
     * @principle Allows public read access, but writes are restricted (not yet implemented).
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorized user validation
    }

    /**
     * @description Manages access to blog posts.
     * @path /blog/{blogId}
     * @allow (get) public
     * @allow (list) public
     * @deny (create) not yet implemented
     * @deny (update) not yet implemented
     * @deny (delete) not yet implemented
     * @principle Allows public read access, but writes are restricted (not yet implemented).
     */
    match /blog/{blogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add author validation
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return request.auth.token.admin == true;
  }
}