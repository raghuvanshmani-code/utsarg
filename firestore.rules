/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with specific rules for different data collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the owner.
 * - /clubs/{clubId}: Stores information about student clubs. Public read, owner-only write.
 * - /events/{eventId}: Stores event details. Public read, owner-only write.
 * - /gallery/{galleryId}: Collection of all media items for the gallery. Admin-only write.
 * - /blog/{blogId}: Stores blog posts and news articles. Public read, owner-only write.
 * - /uploads/{uploadId}: Stores metadata about images uploaded to Cloudinary. Admin-only write.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Gallery and Uploads collections are restricted to admin writes only.
 * - Public read access is granted to the Clubs, Events, and Blog collections.
 * - User documents are owned by the corresponding user ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is signed in and the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is signed in, the UID matches, and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (update, delete) - A user cannot modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for student clubs.
     * @path /clubs/{clubId}
     * @allow (get, list) - Anyone can read club information.
     * @allow (create) - Only the admin can create a club. The club document must contain a field called ownerId
     * matching the user ID creating the club.
     * @allow (update, delete) - Only the owner of a club document can modify/delete it.
     * @deny (create, update, delete) - Non-admins cannot create, modify, or delete clubs.
     * @principle Public read access with owner-only writes.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for events.
     * @path /events/{eventId}
     * @allow (get, list) - Anyone can read event information.
     * @allow (create) - Only the admin can create an event. The event document must contain a field called ownerId
     * matching the user ID creating the event.
     * @allow (update, delete) - Only the owner of an event document can modify/delete it.
     * @deny (create, update, delete) - Non-admins cannot create, modify, or delete events.
     * @principle Public read access with owner-only writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for gallery items.
     * @path /gallery/{galleryId}
     * @allow (get, list) - Anyone can read gallery items.
     * @allow (create, update, delete) - Only admins can create, update, or delete gallery items.
     * @deny (create, update, delete) - Non-admins cannot modify gallery items.
     * @principle Restricts write access to admins only.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for blog posts.
     * @path /blog/{blogId}
     * @allow (get, list) - Anyone can read blog posts.
     * @allow (create) - Only the admin can create a blog post. The blog post document must contain a field called ownerId
     * matching the user ID creating the post.
     * @allow (update, delete) - Only the owner of a blog post document can modify/delete it.
     * @deny (create, update, delete) - Non-admins cannot create, modify, or delete blog posts.
     * @principle Public read access with owner-only writes.
     */
    match /blog/{blogId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for uploads.
     * @path /uploads/{uploadId}
     * @allow (get, list) - Anyone can read uploads.
     * @allow (create, update, delete) - Only admins can create, update, or delete uploads.
     * @deny (create, update, delete) - Non-admins cannot modify uploads.
     * @principle Restricts write access to admins only.
     */
    match /uploads/{uploadId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}