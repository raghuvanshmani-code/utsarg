/**
 * @file Overview
 * This ruleset enforces a role-based access control model, with specific emphasis on admin privileges
 * for managing Cloudinary uploads. All other data is publicly readable, but only authenticated users
 * can create, update, or delete it. Data consistency between paths and document content is enforced
 * where applicable.
 *
 * @data-structure
 * - /users/{userId}: Stores user profile information.
 * - /clubs/{clubId}: Stores club details.
 * - /events/{eventId}: Stores event information.
 * - /gallery/{galleryId}: Stores gallery items (images, videos).
 * - /blog/{blogId}: Stores blog posts.
 * - /uploads/{uploadId}: Stores metadata about Cloudinary uploads. Only admins can manage these.
 *
 * @key-security-decisions
 * - Users can only manage their own profiles.
 * - All data is publicly readable.
 * - Admin role is required to manage Cloudinary uploads.
 * - Data consistency is enforced for user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create /users/user123.
     * @allow (update) - User with UID 'user123' can update /users/user123.
     * @deny (create) - User with UID 'user456' cannot create /users/user123.
     * @deny (update) - User with UID 'user456' cannot update /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to club information.
     * @path /clubs/{clubId}
     * @allow (get) - Any user can read club data.
     * @allow (list) - Any user can list clubs.
     * @allow (create) - Authenticated users can create clubs.
     * @allow (update) - Authenticated users can update clubs.
     * @deny (delete) - Only club leaders can delete clubs (TODO: Implement club leader role).
     * @principle Allows public read access, restricts writes to authenticated users.
     */
    match /clubs/{clubId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if false; // TODO: add club leader validation once roles are implemented
    }

    /**
     * @description Controls access to event information.
     * @path /events/{eventId}
     * @allow (get) - Any user can read event data.
     * @allow (list) - Any user can list events.
     * @allow (create) - Authenticated users can create events.
     * @allow (update) - Authenticated users can update events.
     * @deny (delete) - Authenticated users cannot delete events.
     * @principle Allows public read access, restricts writes to authenticated users.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to gallery items.
     * @path /gallery/{galleryId}
     * @allow (get) - Any user can read gallery items.
     * @allow (list) - Any user can list gallery items.
     * @allow (create) - Authenticated users can create gallery items.
     * @allow (update) - Authenticated users can update gallery items.
     * @deny (delete) - Authenticated users cannot delete gallery items.
     * @principle Allows public read access, restricts writes to authenticated users.
     */
    match /gallery/{galleryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to blog posts.
     * @path /blog/{blogId}
     * @allow (get) - Any user can read blog posts.
     * @allow (list) - Any user can list blog posts.
     * @allow (create) - Authenticated users can create blog posts.
     * @allow (update) - Authenticated users can update blog posts.
     * @deny (delete) - Authenticated users cannot delete blog posts.
     * @principle Allows public read access, restricts writes to authenticated users.
     */
    match /blog/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to Cloudinary upload metadata.
     * @path /uploads/{uploadId}
     * @allow (get) - Any user can read upload metadata.
     * @allow (list) - Any user can list upload metadata.
     * @allow (create) - Only admins can create upload metadata.
     * @allow (update) - Only admins can update upload metadata.
     * @deny (delete) - Only admins can delete upload metadata.
     * @principle Restricts write access to admin users.
     */
    match /uploads/{uploadId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return request.auth.token.role == 'admin';
  }
}