/**
 * @fileoverview Firestore Security Rules.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control based on user roles and ownership.
 * It uses a combination of role-based and ownership-based access control mechanisms.
 * In this Prototyping stage all Rules will be implemented, however, data shape validation is skipped.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the owning user.
 * - /society/meta: A singleton document holding society metadata, publicly readable.
 * - /clubs/{clubId}: Stores club information, publicly readable.
 * - /volunteers/{volunteerId}: Volunteer profiles, publicly readable.
 * - /members/{memberId}: Member profiles, publicly readable.
 * - /events/{eventId}: Event details, publicly readable.
 * - /gallery/{galleryId}: Public gallery media items.
 * - /funds/accounting/transactions/{transactionId}: Financial transactions, write-protected (TODO: Add role-based access).
 * - /philanthropy/{activityId}: Records of philanthropic activities, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disabled for security.
 * - Society metadata is publicly readable.
 * - Read-only collections (e.g., society metadata) are explicitly marked.
 * - Ambiguous relationships default to strict owner-only access.
 * - Data shape validation is skipped in this Prototyping Stage.
 *
 * Denormalization for Authorization:
 * - No denormalization is required in this initial ruleset.
 *
 * Structural Segregation:
 * - All data is stored in top-level collections based on its purpose (user profiles, clubs, etc.).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can read, update, and delete their profile.
     * @deny (create, get, update, delete) Any other user cannot access this profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent user enumeration
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the society metadata document.
     * @path /society/meta
     * @allow (get, list) Any user can read the society metadata.
     * @deny (create, update, delete) No user can create, update, or delete the society metadata.
     * @principle Public read access with no write access.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to club documents.
     * @path /clubs/{clubId}
     * @allow (get, list) Any user can read club information.
     * @deny (create, update, delete) No user can create, update, or delete club information.
     * @principle Public read access with no write access.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to volunteer profiles.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) Any user can read volunteer profiles.
     * @deny (create, update, delete) No user can create, update, or delete volunteer profiles.
     * @principle Public read access with no write access.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to member profiles.
     * @path /members/{memberId}
     * @allow (get, list) Any user can read member profiles.
     * @deny (create, update, delete) No user can create, update, or delete member profiles.
     * @principle Public read access with no write access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to event documents.
     * @path /events/{eventId}
     * @allow (get, list) Any user can read event details.
     * @deny (create, update, delete) No user can create, update, or delete event details.
     * @principle Public read access with no write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to gallery media items.
     * @path /gallery/{galleryId}
     * @allow (get, list) Any user can read gallery items.
     * @deny (create, update, delete) No user can create, update, or delete gallery items.
     * @principle Public read access with no write access.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to financial transaction documents.
     * @path /funds/accounting/transactions/{transactionId}
     * @deny (get, list, create, update, delete) No user can access financial transaction.
     * @principle Requires role-based authentication.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get, list, create, update, delete: if false; // TODO: Add role-based access
    }

    /**
     * @description Controls access to philanthropic activities.
     * @path /philanthropy/{activityId}
     * @allow (get, list) Any user can read philanthropic activities.
     * @deny (create, update, delete) No user can create, update, or delete philanthropic activities.
     * @principle Public read access with no write access.
     */
    match /philanthropy/{activityId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}