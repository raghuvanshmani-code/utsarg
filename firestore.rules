/**
 * @file Firebase Security Rules for Utsarg App
 *
 * @description This ruleset defines access control for the Utsarg app's Firestore database.
 * It enforces a combination of public read access for some collections and role-based or
 * ownership-based write access for others.
 *
 * @dataStructure
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 * - /clubs/{clubId}: Club information, publicly readable, writeable only by admins.
 * - /events/{eventId}: Event details, publicly readable, writeable only by admins.
 * - /gallery/{galleryId}: Gallery items, publicly readable, writeable only by admins.
 * - /blog/{blogId}: Blog posts, publicly readable, writeable only by admins.
 * - /uploads/{uploadId}: Uploaded images, writeable only by admins.
 *
 * @keySecurityDecisions
 * - Public read access for clubs, events, gallery, and blog posts to encourage engagement.
 * - Admin-only write access to clubs, events, gallery, and blog posts to maintain content quality and prevent abuse.
 * - Strict user ownership for user profiles, allowing users to manage their own data.
 * - The rules explicitly deny operations when not permitted, ensuring a secure-by-default posture.
 *
 * @denormalizationForAuthorization
 * - None. This ruleset assumes admin status can be checked via custom claims.
 *   If admin status was stored in a document, we would need to denormalize it for performance.
 *
 * @structuralSegregation
 * - All public data is stored in top-level collections. Private user data is stored under /users/{userId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user profiles.
     * @path /users/{userId}
     * @allow (get, list, update, delete) User with uid "user123" can read, update, and delete their own profile at /users/user123.
     * @allow (create) User with uid "user123" can create their profile at /users/user123.
     * @deny (get, list, update, delete) User with uid "user456" cannot read, update, or delete the profile of user "user123".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access and admin-only write access to club information.
     * @path /clubs/{clubId}
     * @allow (get, list) Any user can read the club information.
     * @allow (create, update, delete) Admin user can create, update, and delete club information.
     * @deny (create, update, delete) Non-admin user cannot create, update, or delete club information.
     * @principle Allows public discovery while restricting content modification to authorized personnel.
     */
    match /clubs/{clubId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants public read access and admin-only write access to event details.
     * @path /events/{eventId}
     * @allow (get, list) Any user can read event details.
     * @allow (create, update, delete) Admin user can create, update, and delete event details.
     * @deny (create, update, delete) Non-admin user cannot create, update, or delete event details.
     * @principle Allows public visibility of events while restricting content modification to authorized personnel.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants public read access and admin-only write access to gallery items.
     * @path /gallery/{galleryId}
     * @allow (get, list) Any user can read gallery items.
     * @allow (create, update, delete) Admin user can create, update, and delete gallery items.
     * @deny (create, update, delete) Non-admin user cannot create, update, or delete gallery items.
     * @principle Allows public viewing of gallery content while restricting modifications to authorized personnel.
     */
    match /gallery/{galleryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Grants public read access and admin-only write access to blog posts.
      * @path /blog/{blogId}
      * @allow (get, list) Any user can read the blog posts.
      * @allow (create, update, delete) Admin user can create, update, and delete blog posts.
      * @deny (create, update, delete) Non-admin user cannot create, update, or delete blog posts.
      * @principle Allows public access to blog content while restricting modifications to authorized personnel.
      */
    match /blog/{blogId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin-only write access to uploads.
     * @path /uploads/{uploadId}
     * @allow (create, update, delete) Admin user can create, update, and delete uploads.
     * @deny (get, list) Non-admin user cannot read uploads.
     * @deny (create, update, delete) Non-admin user cannot create, update, or delete uploads.
     * @principle Restricts modifications to authorized personnel.
     */
    match /uploads/{uploadId} {
      allow get: if false;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {boolean} True if the user has the 'admin' custom claim set to true, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

   /**
    * @description Checks if the user is the owner of an existing document.
    * @param {string} userId - The user ID to compare against the request's authentication UID.
    * @return {boolean} True if the user is the owner and the document exists.
    */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}