/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and
 *   allows public read access for other collections. Write access to collections other than user profiles
 *   is completely restricted.
 * @dataStructure
 *   - /users/{userId}: User profiles, accessible only to the owner.
 *   - /society/meta: Society metadata, publicly readable.
 *   - /clubs/{clubId}: Club data, publicly readable.
 *   - /volunteers/{volunteerId}: Volunteer profiles, publicly readable.
 *   - /members/{memberId}: Member profiles, publicly readable.
 *   - /events/{eventId}: Event data, publicly readable.
 *   - /gallery/{galleryId}: Gallery items, publicly readable.
 *   - /funds/accounting/transactions/{transactionId}: Fund transaction logs, publicly readable.
 *   - /philanthropy/{activityId}: Philanthropy activity records, publicly readable.
 * @keySecurityDecisions
 *   - User profiles are private and only accessible to the owner (the authenticated user with the matching UID).
 *   - Listing of user documents is denied to prevent unauthorized access to user data.
 *   - All other collections are publicly readable, but write access is denied to all.
 * @denormalizationForAuthorization N/A - No denormalization is used in this rule set.
 * @structuralSegregation N/A - No structural segregation is used in this rule set.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user
     *   can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) Signed-in user with matching {userId} can create their profile.
     * @allow (get) Signed-in user with matching {userId} can read their profile.
     * @allow (update) Signed-in user with matching {userId} can update their profile.
     * @allow (delete) Signed-in user with matching {userId} can delete their profile.
     * @deny (create) Signed-in user attempts to create a profile with a mismatched {userId}.
     * @deny (get) Signed-in user attempts to read another user's profile.
     * @deny (update) Signed-in user attempts to update another user's profile.
     * @deny (delete) Signed-in user attempts to delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the society metadata singleton document.
     *   Everyone can read the document. No one can create, update, or delete it.
     * @path /society/meta
     * @allow (get) Any user can read the society metadata.
     * @deny (create) No one can create the society metadata.
     * @deny (update) No one can update the society metadata.
     * @deny (delete) No one can delete the society metadata.
     * @principle Allows public read access but restricts write access.
     */
    match /society/meta {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to club documents.
     *   Everyone can read club documents. No one can create, update, or delete them.
     * @path /clubs/{clubId}
     * @allow (get) Any user can read club documents.
     * @allow (list) Any user can list club documents.
     * @deny (create) No one can create club documents.
     * @deny (update) No one can update club documents.
     * @deny (delete) No one can delete club documents.
     * @principle Allows public read access but restricts write access.
     */
    match /clubs/{clubId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to volunteer documents.
     *   Everyone can read volunteer documents. No one can create, update, or delete them.
     * @path /volunteers/{volunteerId}
     * @allow (get) Any user can read volunteer documents.
     * @allow (list) Any user can list volunteer documents.
     * @deny (create) No one can create volunteer documents.
     * @deny (update) No one can update volunteer documents.
     * @deny (delete) No one can delete volunteer documents.
     * @principle Allows public read access but restricts write access.
     */
    match /volunteers/{volunteerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to member documents.
     *   Everyone can read member documents. No one can create, update, or delete them.
     * @path /members/{memberId}
     * @allow (get) Any user can read member documents.
     * @allow (list) Any user can list member documents.
     * @deny (create) No one can create member documents.
     * @deny (update) No one can update member documents.
     * @deny (delete) No one can delete member documents.
     * @principle Allows public read access but restricts write access.
     */
    match /members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to event documents.
     *   Everyone can read event documents. No one can create, update, or delete them.
     * @path /events/{eventId}
     * @allow (get) Any user can read event documents.
     * @allow (list) Any user can list event documents.
     * @deny (create) No one can create event documents.
     * @deny (update) No one can update event documents.
     * @deny (delete) No one can delete event documents.
     * @principle Allows public read access but restricts write access.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to gallery item documents.
     *   Everyone can read gallery item documents. No one can create, update, or delete them.
     * @path /gallery/{galleryId}
     * @allow (get) Any user can read gallery item documents.
     * @allow (list) Any user can list gallery item documents.
     * @deny (create) No one can create gallery item documents.
     * @deny (update) No one can update gallery item documents.
     * @deny (delete) No one can delete gallery item documents.
     * @principle Allows public read access but restricts write access.
     */
    match /gallery/{galleryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to fund transaction documents.
     *   Everyone can read fund transaction documents. No one can create, update, or delete them.
     *   These rules are placed under the `/funds/accounting/transactions` path.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get) Any user can read fund transaction documents.
     * @allow (list) Any user can list fund transaction documents.
     * @deny (create) No one can create fund transaction documents.
     * @deny (update) No one can update fund transaction documents.
     * @deny (delete) No one can delete fund transaction documents.
     * @principle Allows public read access but restricts write access.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to philanthropy activity documents.
     *   Everyone can read philanthropy activity documents. No one can create, update, or delete them.
     * @path /philanthropy/{activityId}
     * @allow (get) Any user can read philanthropy activity documents.
     * @allow (list) Any user can list philanthropy activity documents.
     * @deny (create) No one can create philanthropy activity documents.
     * @deny (update) No one can update philanthropy activity documents.
     * @deny (delete) No one can delete philanthropy activity documents.
     * @principle Allows public read access but restricts write access.
     */
    match /philanthropy/{activityId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of an existing document
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}