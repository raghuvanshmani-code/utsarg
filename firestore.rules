/**
 * @fileOverview Firestore Security Rules for the student club app.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements a user-ownership model for user profiles and restricts access to gallery items.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /clubs/{clubId}: Stores club information, publicly readable.
 * - /events/{eventId}: Stores event details, publicly readable.
 * - /gallery/{galleryId}: Stores gallery items, not visible to common users.
 * - /blog/{blogId}: Stores blog posts, publicly readable.
 * - /uploads/{uploadId}: Stores upload metadata, publicly readable.
 *
 * Key Security Decisions:
 * - User profiles are strictly private (owner-only access).
 * - Gallery items are not visible to common users.
 * - Other collections (clubs, events, blog, uploads) are publicly readable but writes are disabled in this prototype phase.
 *
 * Denormalization for Authorization:
 *  N/A in this simple prototype, more complex rules will need denormalization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     * @example
     * // Assuming request.auth.uid is "user123"
     * isOwner("user123") // Returns true
     * isOwner("user456") // Returns false
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User "user123" can create their profile with matching ID.
     * @allow (get, update, delete) User "user123" can access/modify their own profile.
     * @deny (create) User "user123" cannot create profile for "user456".
     * @deny (get, update, delete) User "user123" cannot access/modify profile of "user456".
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) ;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for student clubs.
     * @path /clubs/{clubId}
     * @allow (get, list) Any user can read club information.
     * @deny (create, update, delete) No one can create, update, or delete clubs in this prototype.
     * @principle Public read access.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for events.
     * @path /events/{eventId}
     * @allow (get, list) Any user can read event details.
     * @deny (create, update, delete) No one can create, update, or delete events in this prototype.
     * @principle Public read access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for gallery items. Gallery item is not visible to common users.
     * @path /gallery/{galleryId}
     * @deny (get, list, create, update, delete) No user can view gallery items.
     */
    match /gallery/{galleryId} {
        allow get, list, create, update, delete: if false;
    }

    /**
     * @description Security rules for blog posts.
     * @path /blog/{blogId}
     * @allow (get, list) Any user can read blog posts.
     * @deny (create, update, delete) No one can create, update, or delete blog posts in this prototype.
     * @principle Public read access.
     */
    match /blog/{blogId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for Cloudinary image metadata.
     * @path /uploads/{uploadId}
     * @allow (get, list) Any user can read upload metadata.
     * @deny (create, update, delete) No one can create, update, or delete upload metadata in this prototype.
     * @principle Public read access.
     */
    match /uploads/{uploadId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}