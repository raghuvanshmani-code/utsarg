/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /clubs/{clubId}: Stores club information.
 * - /events/{eventId}: Stores event details.
 * - /gallery/{galleryId}: Stores gallery media items.
 * - /blog/{blogId}: Stores blog posts and news articles.
 * - /uploads/{uploadId}: Stores metadata about uploaded images.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Only authenticated users can create, update, or delete clubs, events, blog posts and gallery items.
 * - Admins can manage any club, event, blog post and gallery items.
 *
 * Denormalization for Authorization:
 * - The 'club' entity requires an 'ownerId' field to properly implement owner-only writes (create, update, delete).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile data and admins to read any user profile. Only the authenticated user can create their profile. Only the authenticated user or an admin can update or delete a user profile.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces document ownership for writes and restricts listing to admins.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to read clubs. Allows admins to create, update, or delete any club.
     * @path /clubs/{clubId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update) if isSignedIn()
     * @allow (delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     * @principle Public read, owner-only writes for create, update, and delete.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read events. Allows admins to create, update, or delete any event.
     * @path /events/{eventId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update) if isSignedIn()
     * @allow (delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     * @principle Public read, owner-only writes for create, update, and delete.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read gallery items. Allows admins to create, update, or delete any gallery item.
     * @path /gallery/{galleryId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update) if isSignedIn()
     * @allow (delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     * @principle Public read, owner-only writes for create, update, and delete.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read blog posts. Allows admins to create, update, or delete any blog post.
     * @path /blog/{blogId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update) if isSignedIn()
     * @allow (delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     * @principle Public read, owner-only writes for create, update, and delete.
     */
    match /blog/{blogId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read uploads. Allows admins to create, update, or delete any upload.
     * @path /uploads/{uploadId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update) if isSignedIn()
     * @allow (delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update) if !isSignedIn()
     * @deny (delete) if !isSignedIn()
     * @principle Public read, owner-only writes for create, update, and delete.
     */
    match /uploads/{uploadId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}