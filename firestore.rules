/**
 * @file Firebase Security Rules for the Student Society App.
 *
 * Core Philosophy:
 * This ruleset focuses on allowing any authenticated user read access to all data,
 * while restricting write access. The intention is to enable open access to club information
 * and society events, reflecting the user's instruction: "allow crud into blog either im admin or not".
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /society/meta: Singleton document with society metadata.
 * - /clubs/{clubId}: Information about student clubs.
 * - /volunteers/{volunteerId}: Student volunteer profiles.
 * - /members/{memberId}: General member profiles.
 * - /events/{eventId}: Details about club events.
 * - /gallery/{galleryId}: Media items for the gallery.
 * - /funds/accounting/transactions/{transactionId}: Financial transactions.
 * - /philanthropy/{activityId}: Records of philanthropic activities.
 *
 * Key Security Decisions:
 * - All read operations (get, list) are publicly accessible.
 * - All write operations (create, update, delete) are allowed for any authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to user profiles for any authenticated user.
     * @path /users/{userId}
     * @allow (get) User with any auth can read any user profile.
     * @allow (list) User with any auth can list user profiles.
     * @allow (create) User with any auth can create a user profile.
     * @allow (update) User with any auth can update a user profile.
     * @allow (delete) User with any auth can delete a user profile.
     * @principle Allows full access for any authenticated user.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to society metadata for any authenticated user.
     * @path /society/meta
     * @allow (get) User with any auth can read the society metadata.
     * @allow (list) User with any auth can list the society metadata.
     * @allow (create) User with any auth can create the society metadata.
     * @allow (update) User with any auth can update the society metadata.
     * @allow (delete) User with any auth can delete the society metadata.
     * @principle Allows full access for any authenticated user.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to club information for any authenticated user.
     * @path /clubs/{clubId}
     * @allow (get) User with any auth can read any club information.
     * @allow (list) User with any auth can list club information.
     * @allow (create) User with any auth can create a club.
     * @allow (update) User with any auth can update a club.
     * @allow (delete) User with any auth can delete a club.
     * @principle Allows full access for any authenticated user.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to volunteer profiles for any authenticated user.
     * @path /volunteers/{volunteerId}
     * @allow (get) User with any auth can read any volunteer profile.
     * @allow (list) User with any auth can list volunteer profiles.
     * @allow (create) User with any auth can create a volunteer profile.
     * @allow (update) User with any auth can update a volunteer profile.
     * @allow (delete) User with any auth can delete a volunteer profile.
     * @principle Allows full access for any authenticated user.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to member profiles for any authenticated user.
     * @path /members/{memberId}
     * @allow (get) User with any auth can read any member profile.
     * @allow (list) User with any auth can list member profiles.
     * @allow (create) User with any auth can create a member profile.
     * @allow (update) User with any auth can update a member profile.
     * @allow (delete) User with any auth can delete a member profile.
     * @principle Allows full access for any authenticated user.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to club events for any authenticated user.
     * @path /events/{eventId}
     * @allow (get) User with any auth can read any event.
     * @allow (list) User with any auth can list events.
     * @allow (create) User with any auth can create an event.
     * @allow (update) User with any auth can update an event.
     * @allow (delete) User with any auth can delete an event.
     * @principle Allows full access for any authenticated user.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to gallery items for any authenticated user.
     * @path /gallery/{galleryId}
     * @allow (get) User with any auth can read any gallery item.
     * @allow (list) User with any auth can list gallery items.
     * @allow (create) User with any auth can create a gallery item.
     * @allow (update) User with any auth can update a gallery item.
     * @allow (delete) User with any auth can delete a gallery item.
     * @principle Allows full access for any authenticated user.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to fund transactions for any authenticated user.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get) User with any auth can read any transaction.
     * @allow (list) User with any auth can list transactions.
     * @allow (create) User with any auth can create a fund transaction.
     * @allow (update) User with any auth can update a fund transaction.
     * @allow (delete) User with any auth can delete a fund transaction.
     * @principle Allows full access for any authenticated user.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to philanthropy activities for any authenticated user.
     * @path /philanthropy/{activityId}
     * @allow (get) User with any auth can read any philanthropy activity.
     * @allow (list) User with any auth can list philanthropy activities.
     * @allow (create) User with any auth can create a philanthropy activity.
     * @allow (update) User with any auth can update a philanthropy activity.
     * @allow (delete) User with any auth can delete a philanthropy activity.
     * @principle Allows full access for any authenticated user.
     */
    match /philanthropy/{activityId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}