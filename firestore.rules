/**
 * @fileoverview Firestore Security Rules for the Student Society App.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-only access model for user-specific data
 * and allows public read access to certain collections like 'clubs' and 'events'.
 * Write access to these public collections is restricted to authenticated users
 * with proper authorization enforced through an ownership field.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Society-wide metadata is stored in a singleton document `/society/meta`.
 * - Clubs are stored under `/clubs/{clubId}`.
 * - Volunteers are stored under `/volunteers/{volunteerId}`.
 * - Members are stored under `/members/{memberId}`.
 * - Events are stored under `/events/{eventId}`.
 * - Gallery items are stored under `/gallery/{galleryId}`.
 * - Fund transactions are stored under `/funds/accounting/transactions/{transactionId}`.
 * - Philanthropy activities are stored under `/philanthropy/{activityId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing all users is disallowed for privacy reasons.
 * - Public collections ('clubs', 'events', 'gallery') are readable by everyone,
 *   but write access is restricted to authenticated users who own the respective document.
 * - Strict ownership is enforced for fund transactions and philanthropy activities.
 *
 * Denormalization for Authorization:
 * The rules assume that documents in public collections like 'clubs' and 'events'
 * contain an ownership field (e.g., `ownerId` or `clubId`) that matches the user ID
 * of the creator. This allows for efficient authorization checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can read, update, or delete their own profile if the userId matches their auth.uid.
     * @deny (create, get, update, delete) If the user is not authenticated or the userId does not match their auth.uid.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the society metadata document.
     * @path /society/meta
     * @allow (get, list) Everyone can read the society metadata.
     * @deny (create, update, delete) No one can create, update, or delete the society metadata.
     * @principle Restricts write access to a singleton document.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to club documents.
     * @path /clubs/{clubId}
     * @allow (get, list) Everyone can read the club information.
     * @allow (create) Authenticated user can create a club document if request.auth.uid == request.resource.data.ownerId.
     * @allow (update, delete) Authenticated user can update or delete a club document if request.auth.uid == resource.data.ownerId.
     * @deny (create, update, delete) If the user is not the owner of the club.
     * @principle Public read access with owner-only writes.
     */
    match /clubs/{clubId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to volunteer documents.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) Everyone can read the volunteer profiles.
     * @allow (create) Authenticated user can create a volunteer profile if request.auth.uid == request.resource.data.ownerId.
     * @allow (update, delete) Authenticated user can update or delete a volunteer profile if request.auth.uid == resource.data.ownerId.
     * @deny (create, update, delete) If the user is not the owner of the volunteer profile.
     * @principle Public read access with owner-only writes.
     */
    match /volunteers/{volunteerId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to member documents.
     * @path /members/{memberId}
     * @allow (get, list) Everyone can read member profiles.
     * @allow (create) Authenticated user can create a member profile if request.auth.uid == request.resource.data.ownerId.
     * @allow (update, delete) Authenticated user can update or delete a member profile if request.auth.uid == resource.data.ownerId.
     * @deny (create, update, delete) If the user is not the owner of the member profile.
     * @principle Public read access with owner-only writes.
     */
    match /members/{memberId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to event documents.
     * @path /events/{eventId}
     * @allow (get, list) Everyone can read the event details.
     * @allow (create) Authenticated user can create an event if request.auth.uid == request.resource.data.clubId.
     * @allow (update, delete) Authenticated user can update or delete an event if request.auth.uid == resource.data.clubId.
     * @deny (create, update, delete) If the user is not the club.
     * @principle Public read access with owner-only writes.
     */
    match /events/{eventId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to gallery item documents.
     * @path /gallery/{galleryId}
     * @allow (get, list) Everyone can read the gallery items.
     * @allow (create) Authenticated user can create a gallery item if request.auth.uid == request.resource.data.uploadedBy.
     * @allow (update, delete) Authenticated user can update or delete a gallery item if request.auth.uid == resource.data.uploadedBy.
     * @deny (create, update, delete) If the user is not the uploader of the gallery item.
     * @principle Public read access with owner-only writes.
     */
    match /gallery/{galleryId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() ;//&& request.resource.data.uploadedBy == request.auth.uid;
        allow update: if isSignedIn() ;//&& resource.data.uploadedBy == request.auth.uid && resource != null;
        allow delete: if isSignedIn() ;//&& resource.data.uploadedBy == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to fund transaction documents.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get, list) No one can read fund transactions without specific authorization.
     * @allow (create) Authenticated user can create a fund transaction if request.auth.uid == request.resource.data.signatories.
     * @allow (update, delete) Authenticated user can update or delete a fund transaction if request.auth.uid == resource.data.signatories.
     * @deny (create, update, delete) If the user is not a signatory of the transaction.
     * @principle Owner-only writes.
     */
    match /funds/accounting/transactions/{transactionId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if false;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to philanthropy activity documents.
     * @path /philanthropy/{activityId}
     * @allow (get, list) No one can read philanthropy activities without specific authorization.
     * @allow (create) Authenticated user can create a philanthropy activity if request.auth.uid == request.resource.data.volunteers.
     * @allow (update, delete) Authenticated user can update or delete a philanthropy activity if request.auth.uid == resource.data.volunteers.
     * @deny (create, update, delete) If the user is not a volunteer for the activity.
     * @principle Owner-only writes.
     */
    match /philanthropy/{activityId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if false;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}