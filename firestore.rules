/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a security model with user-specific data and shared access to other resources.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /clubs/{clubId}: Stores club information, publicly readable but writeable only by admins.
 * - /events/{eventId}: Stores event details, publicly readable but writeable only by admins.
 * - /gallery/{galleryId}: Stores gallery items, publicly readable but writeable only by admins.
 * - /blog/{blogId}: Stores blog posts, publicly readable, writeable only by admins.
 *
 * Key Security Decisions:
 * - User data is strictly controlled; users can only access their own profile information.
 * - Listing of users is not permitted to protect user privacy.
 * - Club, event, gallery and blog data are publicly readable, but write access is restricted to admins.
 *
 * Access Control Patterns:
 * - /users/{userId}: Ownership.
 * - /clubs/{clubId}: Public Read with Admin-Only Writes.
 * - /events/{eventId}: Public Read with Admin-Only Writes.
 * - /gallery/{galleryId}: Public Read with Admin-Only Writes.
 * - /blog/{blogId}: Public Read with Admin-Only Writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, allowing users to read and write their own data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's ID matches the requested userId.
     * @deny (get, create, update, delete) if the user's ID does not match the requested userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      // Helper function to check if the user is signed in and is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages club data, allowing public read access, but restricting writes to admins.
     * @path /clubs/{clubId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to only authenticated admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Restricts write access to administrators.
     */
    match /clubs/{clubId} {
        function isAdmin() {
            return request.auth != null && request.auth.token.role == 'admin';
        }

      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages event data, allowing public read access, but restricting writes to admins.
     * @path /events/{eventId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to only authenticated admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Restricts write access to administrators.
     */
    match /events/{eventId} {
        function isAdmin() {
            return request.auth != null && request.auth.token.role == 'admin';
        }

      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages gallery data, allowing public read access, but restricting writes to admins.
     * @path /gallery/{galleryId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to only authenticated admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Restricts write access to administrators.
     */
    match /gallery/{galleryId} {
      function isAdmin() {
          return request.auth != null && request.auth.token.role == 'admin';
      }

      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages blog post data, allowing public read access, but restricting writes to admins.
     * @path /blog/{blogId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to only authenticated admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Restricts write access to administrators.
     */
    match /blog/{blogId} {
        function isAdmin() {
            return request.auth != null && request.auth.token.role == 'admin';
        }

      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}