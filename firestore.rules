/**
 * @fileoverview Firestore Security Rules for the student society app.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It uses a mixture of owner-only access for user-specific data and public read access with owner-controlled writes for shared content.
 * Data validation is relaxed to enable rapid prototyping but includes critical checks for relational integrity and authorization.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profiles, accessible only to the owning user.
 * - `/society/meta`: Singleton document containing society metadata; read-only for all users.
 * - `/clubs/{clubId}`: Stores club information; publicly readable, but write access is restricted to owners (if implemented).
 * - `/volunteers/{volunteerId}`: Stores volunteer profiles; publicly readable, but write access is restricted to owners (if implemented).
 * - `/members/{memberId}`: Stores member profiles; publicly readable, but write access is restricted to owners (if implemented).
 * - `/events/{eventId}`: Stores event details; publicly readable, but write access is restricted to owners (if implemented).
 * - `/gallery/{galleryId}`: Stores media gallery items; publicly readable, but write access is restricted to owners (if implemented).
 * - `/funds/accounting/transactions/{transactionId}`: Logs financial transactions; write access is denied.
 * - `/philanthropy/{activityId}`: Records philanthropic activities; publicly readable, but write access is restricted to owners (if implemented).
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect user privacy.
 * - The `/society/meta` document is read-only for all users.
 * - Ambiguous write permissions default to the most secure option (denied) and include a `// TODO:` comment.
 * - Data validation is limited to relational integrity and authorization checks.
 * - Public read access is granted to several collections to allow for easy data consumption.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, allowing each user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates their profile at /users/user123 with matching uid field.
     * @allow (get, update, delete) - User with UID 'user123' reads/updates/deletes their profile at /users/user123.
     * @deny (create, get, update, delete) - User with UID 'user456' attempts to access profile data at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the society metadata, making it publicly readable but preventing modifications.
     * @path /society/meta
     * @allow (get, list) - Any user can read the society metadata.
     * @deny (create, update, delete) - No user can modify the society metadata.
     * @principle Provides public read access while restricting write access.
     */
    match /society/meta {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages club information, allowing public read access with owner-restricted writes.
     * @path /clubs/{clubId}
     * @allow (get, list) - Any user can read the club information.
     * @deny (create, update, delete) - No user can create, update, or delete club information without specific authorization.
     * @principle Provides public read access with restricted write access.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages volunteer profiles, allowing public read access with owner-restricted writes.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) - Any user can read the volunteer profiles.
     * @deny (create, update, delete) - No user can create, update, or delete volunteer profiles without specific authorization.
     * @principle Provides public read access with restricted write access.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages member profiles, allowing public read access with owner-restricted writes.
     * @path /members/{memberId}
     * @allow (get, list) - Any user can read the member profiles.
     * @deny (create, update, delete) - No user can create, update, or delete member profiles without specific authorization.
     * @principle Provides public read access with restricted write access.
     */
    match /members/{memberId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages event details, allowing public read access with owner-restricted writes.
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read the event details.
     * @deny (create, update, delete) - No user can create, update, or delete event details without specific authorization.
     * @principle Provides public read access with restricted write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages media gallery items, allowing public read access with owner-restricted writes.
     * @path /gallery/{galleryId}
     * @allow (get, list) - Any user can read the gallery items.
     * @deny (create, update, delete) - No user can create, update, or delete gallery items without specific authorization.
     * @principle Provides public read access with restricted write access.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Logs financial transactions, denying all access.
     * @path /funds/accounting/transactions/{transactionId}
     * @deny (get, list, create, update, delete) - No user can access or modify financial transaction logs.
     * @principle Restricts all access to sensitive financial data.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Records philanthropic activities, allowing public read access with owner-restricted writes.
     * @path /philanthropy/{activityId}
     * @allow (get, list) - Any user can read records of philanthropic activities.
     * @deny (create, update, delete) - No user can create, update, or delete philanthropy activity records without specific authorization.
     * @principle Provides public read access with restricted write access.
     */
    match /philanthropy/{activityId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    
    /**
     * @description Blogs are public and can be read by anyone.
     * @path /blog
     * @allow (get, list) - Any user can read a blog.
     * @deny (create, update, delete) - No user can create, update, or delete a blog.
     * @principle Provides public read access.
     */
    match /blog {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}