/**
 * @file Firestore Security Rules
 * @description This ruleset prioritizes ease of access for administrative purposes, granting broad read and write permissions to authenticated users. Data shape validation is relaxed to facilitate rapid prototyping and iteration.
 *
 * Core Philosophy:
 *  - The ruleset allows authenticated users to perform all create, read, update, and delete operations on any document in the database, effectively acting as an "admin" role for development.
 *  - This is NOT suitable for production and must be replaced with more restrictive rules before launch.
 *
 * Data Structure:
 *  - The database contains collections for users, society metadata, clubs, volunteers, members, events, gallery items, fund transactions, and philanthropy activities.
 *  - Each collection stores documents representing individual entities.
 *
 * Key Security Decisions:
 *  - User listing is allowed.
 *  - No schema validation beyond authentication checks is performed.
 *  - All authenticated users are implicitly trusted as admins during prototyping.
 *
 * WARNING: This ruleset is INSECURE and should NEVER be used in a production environment.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read and write user profile data.
     * @path /users/{userId}
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete user profiles.
     * @allow (get, list) - Any authenticated user can read user profiles.
     * @deny (none) - This rule allows all authenticated operations.
     * @principle Allows create, read, update, and delete operations on any document in the database.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write society metadata.
     * @path /society/meta
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete society metadata.
     * @allow (get, list) - Any authenticated user can read society metadata.
     * @deny (none) - This rule allows all authenticated operations.
     * @principle Allows create, read, update, and delete operations on any document in the database.
     */
    match /society/meta {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write club data.
     * @path /clubs/{clubId}
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete club data.
     * @allow (get, list) - Any authenticated user can read club data.
     * @deny (none) - This rule allows all authenticated operations.
     * @principle Allows create, read, update, and delete operations on any document in the database.
     */
    match /clubs/{clubId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write volunteer data.
     * @path /volunteers/{volunteerId}
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete volunteer data.
     * @allow (get, list) - Any authenticated user can read volunteer data.
     * @deny (none) - This rule allows all authenticated operations.
     * @principle Allows create, read, update, and delete operations on any document in the database.
     */
    match /volunteers/{volunteerId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write member data.
     * @path /members/{memberId}
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete member data.
     * @allow (get, list) - Any authenticated user can read member data.
     * @deny (none) - This rule allows all authenticated operations.
     * @principle Allows create, read, update, and delete operations on any document in the database.
     */
    match /members/{memberId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write event data.
     * @path /events/{eventId}
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete event data.
     * @allow (get, list) - Any authenticated user can read event data.
     * @deny (none) - This rule allows all authenticated operations.
     * @principle Allows create, read, update, and delete operations on any document in the database.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write gallery item data.
     * @path /gallery/{galleryId}
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete gallery item data.
     * @allow (get, list) - Any authenticated user can read gallery item data.
     * @deny (none) - This rule allows all authenticated operations.
     * @principle Allows create, read, update, and delete operations on any document in the database.
     */
    match /gallery/{galleryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write fund transaction data.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete fund transaction data.
     * @allow (get, list) - Any authenticated user can read fund transaction data.
     * @deny (none) - This rule allows all authenticated operations.
     * @principle Allows create, read, update, and delete operations on any document in the database.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read and write philanthropy activity data.
     * @path /philanthropy/{activityId}
     * @allow (create, update, delete) - Any authenticated user can create, update, or delete philanthropy activity data.
     * @allow (get, list) - Any authenticated user can read philanthropy activity data.
     * @deny (none) - This rule allows all authenticated operations.
     * @principle Allows create, read, update, and delete operations on any document in the database.
     */
    match /philanthropy/{activityId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Function to check if a user is signed in.
     */
    function isSignedIn() {
        return request.auth != null;
    }
  }
}