/**
 * @fileoverview Firestore Security Rules for the student society application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user identity and
 * explicit ownership, while remaining flexible on data shapes during the
 * prototyping phase. It enforces strict control over who can access and
 * modify data.
 *
 * Data Structure:
 * - /users/{userId}: Public user profile information, accessible to everyone, but editable only by the user themselves.
 * - /society/meta: A singleton document containing society-wide metadata, read-only for all.
 * - /clubs/{clubId}: Information about individual clubs, publicly readable, but writes are not authorized (requires a custom role to manage).
 * - /volunteers/{volunteerId}: Profiles for volunteers, publicly readable, but writes are not authorized.
 * - /members/{memberId}: Profiles for members, publicly readable, but writes are not authorized.
 * - /events/{eventId}: Details about club events, publicly readable, but writes are not authorized.
 * - /gallery/{galleryId}: Media items in the gallery, publicly readable, but writes are not authorized.
 * - /funds/accounting/transactions/{transactionId}: Financial transactions, publicly readable, but writes are not authorized.
 * - /philanthropy/{activityId}: Records of philanthropic activities, publicly readable, but writes are not authorized.
 *
 * Key Security Decisions:
 * - User profiles are readable by everyone, but only the user can modify their own profile.
 * - Listing of users is allowed.
 * - The /society/meta document is read-only.
 * - All other collections are publicly readable but not writable in this prototyping phase. Specific authorization checks for create, update, and delete operations will be added once the application's role-based access control is fully defined.
 *
 * Denormalization for Authorization:
 *  - The current ruleset does not require denormalization. If more complex authorization schemes are implemented (e.g., club-specific roles), consider denormalizing relevant data (like member roles) directly onto the documents being secured.
 *
 * Structural Segregation:
 *  - There is no explicit segregation of public and private data within collections at this time. Consider separating public and private data into distinct collections as the application evolves.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list): Any user can read any user profile.
     * @allow (create): A user can create their own profile if the UID matches the document ID.
     * @allow (update): A user can update their own profile.
     * @allow (delete): A user can delete their own profile.
     * @deny (create): A user cannot create a profile for another user.
     * @deny (update): A user cannot update another user's profile.
     * @deny (delete): A user cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read permissions: Allow anyone to read user profiles.
      allow get, list: if true;

      // Write permissions: Only the owner can create, update, or delete.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid; //Enforce immutable uid
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to the society metadata singleton document.
     * @path /society/meta
     * @allow (get): Anyone can read the society metadata.
     * @deny (create, update, delete, list): No one can create, update, or delete the society metadata through client rules.
     * @principle Restricts modification of society metadata.
     */
    match /society/meta {
      // Read permissions: Allow anyone to read the society metadata.
      allow get: if true;

      // Write permissions: No one can create, update, or delete.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
      allow list: if false;
    }

    /**
     * @description Manages access to club documents.
     * @path /clubs/{clubId}
     * @allow (get, list): Any user can read club information.
     * @deny (create, update, delete): No one can create, update, or delete club information without proper authorization.
     * @principle Open read access, restricted write access.
     */
    match /clubs/{clubId} {
      // Read permissions: Allow anyone to read club information.
      allow get, list: if true;

      // Write permissions: No one can create, update, or delete.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to volunteer documents.
     * @path /volunteers/{volunteerId}
     * @allow (get, list): Any user can read volunteer profiles.
     * @deny (create, update, delete): No one can create, update, or delete volunteer profiles without proper authorization.
     * @principle Open read access, restricted write access.
     */
    match /volunteers/{volunteerId} {
      // Read permissions: Allow anyone to read volunteer profiles.
      allow get, list: if true;

      // Write permissions: No one can create, update, or delete.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to member documents.
     * @path /members/{memberId}
     * @allow (get, list): Any user can read member profiles.
     * @deny (create, update, delete): No one can create, update, or delete member profiles without proper authorization.
     * @principle Open read access, restricted write access.
     */
    match /members/{memberId} {
      // Read permissions: Allow anyone to read member profiles.
      allow get, list: if true;

      // Write permissions: No one can create, update, or delete.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to event documents.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event details.
     * @deny (create, update, delete): No one can create, update, or delete event details without proper authorization.
     * @principle Open read access, restricted write access.
     */
    match /events/{eventId} {
      // Read permissions: Allow anyone to read event details.
      allow get, list: if true;

      // Write permissions: No one can create, update, or delete.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to gallery item documents.
     * @path /gallery/{galleryId}
     * @allow (get, list): Any user can view gallery items.
     * @deny (create, update, delete): No one can create, update, or delete gallery items without proper authorization.
     * @principle Open read access, restricted write access.
     */
    match /gallery/{galleryId} {
      // Read permissions: Allow anyone to view gallery items.
      allow get, list: if true;

      // Write permissions: No one can create, update, or delete.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to fund transaction documents.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get, list): Any user can read fund transaction records.
     * @deny (create, update, delete): No one can create, update, or delete fund transaction records without proper authorization.
     * @principle Open read access, restricted write access.
     */
    match /funds/accounting/transactions/{transactionId} {
      // Read permissions: Allow anyone to read fund transaction records.
      allow get, list: if true;

      // Write permissions: No one can create, update, or delete.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to philanthropy activity documents.
     * @path /philanthropy/{activityId}
     * @allow (get, list): Any user can read philanthropy activity records.
     * @deny (create, update, delete): No one can create, update, or delete philanthropy activity records without proper authorization.
     * @principle Open read access, restricted write access.
     */
    match /philanthropy/{activityId} {
      // Read permissions: Allow anyone to read philanthropy activity records.
      allow get, list: if true;

      // Write permissions: No one can create, update, or delete.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}