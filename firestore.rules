/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the Cloud Firestore database.
 *
 * Core Philosophy:
 * This ruleset allows all authenticated users to read and write data to the database.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /clubs/{clubId}: Stores club information.
 * - /events/{eventId}: Stores event details.
 * - /gallery/{galleryId}: Stores gallery media items.
 * - /blog/{blogId}: Stores blog posts.
 *
 * Key Security Decisions:
 * - All read and write operations are allowed for authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read and write user data.
     * @path /users/{userId}
     * @allow (get, list) Authenticated user can read any user's data.
     * @allow (create, update, delete) Authenticated user can modify any user's data.
     * @deny (none) No restrictions for authenticated users.
     * @principle Authenticated users can freely access user data.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read and write club data.
     * @path /clubs/{clubId}
     * @allow (get, list) Authenticated user can read any club's data.
     * @allow (create, update, delete) Authenticated user can modify any club's data.
     * @deny (none) No restrictions for authenticated users.
     * @principle Authenticated users can freely access club data.
     */
    match /clubs/{clubId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read and write event data.
     * @path /events/{eventId}
     * @allow (get, list) Authenticated user can read any event's data.
     * @allow (create, update, delete) Authenticated user can modify any event's data.
     * @deny (none) No restrictions for authenticated users.
     * @principle Authenticated users can freely access event data.
     */
    match /events/{eventId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read and write gallery item data.
     * @path /gallery/{galleryId}
     * @allow (get, list) Authenticated user can read any gallery item's data.
     * @allow (create, update, delete) Authenticated user can modify any gallery item's data.
     * @deny (none) No restrictions for authenticated users.
     * @principle Authenticated users can freely access gallery item data.
     */
    match /gallery/{galleryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read and write blog post data.
     * @path /blog/{blogId}
     * @allow (get, list) Authenticated user can read any blog post's data.
     * @allow (create, update, delete) Authenticated user can modify any blog post's data.
     * @deny (none) No restrictions for authenticated users.
     * @principle Authenticated users can freely access blog post data.
     */
    match /blog/{blogId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}