/**
 * @fileoverview Firestore Security Rules for the student society app.
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of use for the admin panel during the prototyping phase.
 * Therefore, it grants broad access to all authenticated users, effectively bypassing
 * many authorization checks. This is **NOT suitable for production** and should be
 * replaced with more granular permissions as the application matures.
 *
 * Data Structure:
 * The Firestore database contains collections for users, clubs, volunteers, members, events, gallery items, fund transactions, and philanthropy activities.
 * A single document at `/society/meta` stores society-wide metadata.
 *
 * Key Security Decisions:
 * - **Admin Panel Access**: All authenticated users are treated as admins and can perform any operation.
 * - **No User Listing**: Listing all users is explicitly denied.
 * - **No Data Shape Validation**: Data validation is minimal to allow for rapid prototyping. Only the existence of essential fields for relationships is checked.
 *
 * WARNING: This ruleset is highly permissive and intended ONLY for prototyping.
 * It should be replaced with more restrictive rules before deploying to production.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Allows anyone to read and write to any document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle OPEN ACCESS FOR PROTOTYPING - DO NOT USE IN PRODUCTION.
     */
    function allowAll() {
        return true;
    }

    /**
     * @description Denies listing of all user documents.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Preventative measure against data leakage.
     */
    function denyList() {
        return false;
    }

    /**
     * @description Defines a user ID match
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle User ID must match auth UID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }


    /**
     * @description Manages User Profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their profile.
     * @allow (get, update, delete) Signed-in user can access their profile.
     * @deny (create) Signed-in user cannot create another user's profile.
     * @deny (get, update, delete) Signed-in user cannot access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages Society Metadata.
     * @path /society/meta
     * @allow (get) All users can read the society metadata.
     * @allow (create, update, delete) Only signed-in users can modify the society metadata.
     * @deny None.
     * @principle Open read access, write access for admins.
     */
    match /society/meta {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Club data.
     * @path /clubs/{clubId}
     * @allow (get, list) All users can read club data.
     * @allow (create, update, delete) Only signed-in users can modify club data.
     * @deny None.
     * @principle Open read access, write access for admins.
     */
    match /clubs/{clubId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Volunteer profiles.
     * @path /volunteers/{volunteerId}
     * @allow (get, list) All users can read volunteer profiles.
     * @allow (create, update, delete) Only signed-in users can modify volunteer profiles.
     * @deny None.
     * @principle Open read access, write access for admins.
     */
    match /volunteers/{volunteerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Member profiles.
     * @path /members/{memberId}
     * @allow (get, list) All users can read member profiles.
     * @allow (create, update, delete) Only signed-in users can modify member profiles.
     * @deny None.
     * @principle Open read access, write access for admins.
     */
    match /members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Event data.
     * @path /events/{eventId}
     * @allow (get, list) All users can read event data.
     * @allow (create, update, delete) Only signed-in users can modify event data.
     * @deny None.
     * @principle Open read access, write access for admins.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Gallery items.
     * @path /gallery/{galleryId}
     * @allow (get, list) All users can read gallery items.
     * @allow (create, update, delete) Only signed-in users can modify gallery items.
     * @deny None.
     * @principle Open read access, write access for admins.
     */
    match /gallery/{galleryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Fund Transactions.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get, list) All users can read fund transaction data.
     * @allow (create, update, delete) Only signed-in users can modify fund transaction data.
     * @deny None.
     * @principle Open read access, write access for admins.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Philanthropy Activities.
     * @path /philanthropy/{activityId}
     * @allow (get, list) All users can read philanthropy activity data.
     * @allow (create, update, delete) Only signed-in users can modify philanthropy activity data.
     * @deny None.
     * @principle Open read access, write access for admins.
     */
    match /philanthropy/{activityId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}