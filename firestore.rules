/**
 * @file Firestore Security Rules
 * @description This ruleset implements a hybrid security model, balancing public accessibility with user-based ownership and authentication.
 *
 * Core Philosophy:
 *  - Allows open reads (get, list) for public content while restricting writes to authenticated users or specific owners.
 *  - Enforces ownership for user-specific data trees, ensuring only the user can modify their own data.
 *
 * Data Structure:
 *  - Public data is stored in top-level collections like `/clubs`, `/events`, `/gallery`, and `/blog`.
 *  - User-specific data is stored under `/users/{userId}`.
 *  - Images uploaded by users are stored under `/uploads/{uploadId}`.
 *
 * Key Security Decisions:
 *  - Public Read Access: Collections like `/clubs`, `/events`, `/gallery`, and `/blog` are publicly readable to support open discovery.
 *  - Authenticated Writes for Uploads: Only authenticated users can create documents in `/uploads`.
 *  - Ownership Enforcement: All user-specific data under `/users/{userId}` can only be accessed by the corresponding user.
 *  - No User Listing: Listing all users (`/users`) is explicitly denied for privacy.
 *
 *  Denormalization for Authorization:
 *   - The `uploads` collection relies on the authenticated user's `uid` to control write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @path N/A
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Allows users to read their own profile data, and create their own profile on signup.  No user listing.
     * @path /users/{userId}
     * @allow (get, update, delete) User 'test_user' can read their own profile.
     * @allow (create) User 'test_user' can create their own profile on signup.
     * @deny (get, update, delete) User 'other_user' cannot read 'test_user' profile.
     * @deny (list) Nobody can list all users.
     * @principle Enforces user-ownership for accessing user profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read club data, but no one to create, update, or delete.
     * @path /clubs/{clubId}
     * @allow (get, list) Anyone can read club information.
     * @deny (create, update, delete) No one can create, update, or delete club information.
     * @principle Enforces public read access but restricts write access.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read event data, but no one to create, update, or delete.
     * @path /events/{eventId}
     * @allow (get, list) Anyone can read event information.
     * @deny (create, update, delete) No one can create, update, or delete event information.
     * @principle Enforces public read access but restricts write access.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read gallery items, but no one to create, update, or delete.
     * @path /gallery/{galleryId}
     * @allow (get, list) Anyone can view gallery items.
     * @deny (create, update, delete) No one can modify gallery items.
     * @principle Enforces public read access but restricts write access.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read blog posts, but no one to create, update, or delete.
     * @path /blog/{blogId}
     * @allow (get, list) Anyone can read blog posts.
     * @deny (create, update, delete) No one can modify blog posts.
     * @principle Enforces public read access but restricts write access.
     */
    match /blog/{blogId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Allows anyone to read user image metadata, but only the owner can create, update, or delete it.
     * @path /userImages/{imageId}
     * @allow (get, list) Anyone can read user image metadata.
     * @allow (create) User 'test_user' can create image metadata if the userId matches their auth.
     * @allow (update, delete) User 'test_user' can update/delete image metadata only if they own it and the document exists.
     * @deny (create) User 'other_user' cannot create image metadata for 'test_user'.
     * @deny (update, delete) User 'other_user' cannot update/delete image metadata owned by 'test_user'.
     * @principle Enforces owner-only write access for user image metadata.
     */
    match /userImages/{imageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

      /**
       * @description Allows authenticated users to create new uploads, and everyone to read (public gallery). No updates or deletes.
       * @path /uploads/{uploadId}
       * @allow (create) Authenticated user can create an upload.
       * @allow (get, list) Everyone can view uploads.
       * @deny (update, delete) No one can update or delete uploads.
       * @principle Enables public read access with authenticated-user-only create access.
       */
    match /uploads/{uploadId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}