/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write patterns.
 * User-specific data (e.g., profiles) is protected with strict ownership checks.
 * Other collections allow public reads with restricted writes based on user roles or ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile data, accessible to everyone but writable only by the owner.
 * - /clubs/{clubId}: Stores club information, publicly readable. Write permissions are open for prototyping.
 * - /events/{eventId}: Stores event details, publicly readable. Write permissions are open for prototyping.
 * - /gallery/{galleryId}: Stores media items, publicly readable. Write permissions are open for prototyping.
 * - /blog/{blogId}: Stores blog posts, publicly readable. Write permissions are open for prototyping.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied as there is no top-level `list` rule.
 * - All write operations require authentication (`isSignedIn()`).
 * - Data validation is limited to authorization-critical fields (e.g., owner IDs) for prototyping.
 *
 * Denormalization for Authorization:
 *  - The `userImages` collection will include the `uid` of the user to enable proper authorization rules.
 *
 * Structural Segregation:
 *  - Public vs. private content is handled by separate collections (e.g., user profiles vs. potentially a private subcollection later).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to manage their own userImages.
     * @path /databases/{database}/documents/userImages/{imageId}
     * @allow (create) - Authenticated user creates a new image document.
     * @deny (create) - Unauthenticated user attempts to create a new image document.
     * @principle Enforces authenticated user-only writes to the userImages collection, ensuring that only logged-in users can upload image metadata.
     */
    match /userImages/{imageId} {
        allow create: if isSignedIn();
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows authenticated users to read and write their own user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, list) - Any user can read public user profiles.
     * @allow (create) - A user can create their profile if the userId matches their auth.uid.
     * @allow (update, delete) - A user can update or delete their profile if the userId matches their auth.uid and the document exists.
     * @deny (create) - A user cannot create a profile with a mismatched userId.
     * @deny (update, delete) - A user cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to club data.  Write access is currently open for prototyping.
     * @path /databases/{database}/documents/clubs/{clubId}
     * @allow (get, list) - Any user can read club information.
     * @allow (create) - Any authenticated user can create a club (for prototyping).
     * @allow (update, delete) - Any authenticated user can modify club data (for prototyping).
     * @principle Allows public reads and open writes for prototyping.
     */
    match /clubs/{clubId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to event data.  Write access is currently open for prototyping.
     * @path /databases/{database}/documents/events/{eventId}
     * @allow (get, list) - Any user can read event information.
     * @allow (create) - Any authenticated user can create an event (for prototyping).
     * @allow (update, delete) - Any authenticated user can modify event data (for prototyping).
     * @principle Allows public reads and open writes for prototyping.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to gallery items. Write access is currently open for prototyping.
     * @path /databases/{database}/documents/gallery/{galleryId}
     * @allow (get, list) - Any user can read gallery items.
     * @allow (create) - Any authenticated user can create a gallery item (for prototyping).
     * @allow (update, delete) - Any authenticated user can modify gallery data (for prototyping).
     * @principle Allows public reads and open writes for prototyping.
     */
    match /gallery/{galleryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to blog posts. Write access is currently open for prototyping.
     * @path /databases/{database}/documents/blog/{blogId}
     * @allow (get, list) - Any user can read blog posts.
     * @allow (create) - Any authenticated user can create a blog post (for prototyping).
     * @allow (update, delete) - Any authenticated user can modify blog data (for prototyping).
     * @principle Allows public reads and open writes for prototyping.
     */
    match /blog/{blogId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to check.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Combines ownership check with resource existence check for update/delete operations.
     * @param {string} userId - The user ID to check.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}