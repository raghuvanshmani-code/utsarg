/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security from an authorization standpoint, enforcing who can
 * access what, while being flexible on data shapes to allow for rapid iteration.
 * It focuses on strict user-ownership and prevents unauthorized data access.
 *
 * Data Structure:
 * The Firestore database is structured as follows:
 * - /users/{userId}: Public user profile information.
 * - /society/meta: Singleton document for society-wide metadata.
 * - /clubs/{clubId}: Information about individual clubs.
 * - /volunteers/{volunteerId}: Profiles of student volunteers.
 * - /members/{memberId}: Profiles of general members.
 * - /events/{eventId}: Details about club events.
 * - /gallery/{galleryId}: Media items in the gallery.
 * - /funds/accounting/transactions/{transactionId}: Financial transactions.
 * - /philanthropy/{activityId}: Records of philanthropic activities.
 *
 * Key Security Decisions:
 * - User-owned data is strictly controlled via the `isOwner(userId)` function.
 * - Listing of user documents is allowed only for the owner, unless explicitly denied.
 * - Write operations are strictly authorized, avoiding open rules (`if true;`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param userId The user's ID.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param userId The user's ID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * It confirms the user is both the owner and that the document exists.
     * @param userId The user's ID.
     * @return True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *         request.auth.uid == 'user123'
     * @allow (get) Any user can read a user profile.
     * @allow (list) User with ID 'user123' can list their own profile (one item).
     *         request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their own profile.
     *         request.auth.uid == 'user123'
     * @allow (delete) User with ID 'user123' can delete their own profile.
     *         request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *       request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for society metadata.
     * @path /society/meta
     * @allow (get) Any user can read society metadata.
     * @allow (list) Any user can list the society metadata.
     * @deny (create) No one can create the society metadata through client.
     * @deny (update) No one can update the society metadata through client.
     * @deny (delete) No one can delete the society metadata through client.
     * @principle Public read-only access; writes are not allowed.
     */
    match /society/meta {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for clubs.
     * @path /clubs/{clubId}
     * @allow (get) Any user can read club information.
     * @allow (list) Any user can list clubs.
     * @deny (create) No one can create club information through client.
     * @deny (update) No one can update club information through client.
     * @deny (delete) No one can delete club information through client.
     * @principle Public read-only access; writes are not allowed.
     */
    match /clubs/{clubId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for volunteers.
     * @path /volunteers/{volunteerId}
     * @allow (get) Any user can read volunteer profiles.
     * @allow (list) Any user can list volunteer profiles.
     * @deny (create) No one can create volunteer profiles through client.
     * @deny (update) No one can update volunteer profiles through client.
     * @deny (delete) No one can delete volunteer profiles through client.
     * @principle Public read-only access; writes are not allowed.
     */
    match /volunteers/{volunteerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for members.
     * @path /members/{memberId}
     * @allow (get) Any user can read member profiles.
     * @allow (list) Any user can list member profiles.
     * @deny (create) No one can create member profiles through client.
     * @deny (update) No one can update member profiles through client.
     * @deny (delete) No one can delete member profiles through client.
     * @principle Public read-only access; writes are not allowed.
     */
    match /members/{memberId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for events.
     * @path /events/{eventId}
     * @allow (get) Any user can read event details.
     * @allow (list) Any user can list events.
     * @deny (create) No one can create events through client.
     * @deny (update) No one can update events through client.
     * @deny (delete) No one can delete events through client.
     * @principle Public read-only access; writes are not allowed.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for gallery items.
     * @path /gallery/{galleryId}
     * @allow (get) Any user can read gallery item details.
     * @allow (list) Any user can list gallery items.
     * @deny (create) No one can create gallery items through client.
     * @deny (update) No one can update gallery items through client.
     * @deny (delete) No one can delete gallery items through client.
     * @principle Public read-only access; writes are not allowed.
     */
    match /gallery/{galleryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for fund transactions.
     * @path /funds/accounting/transactions/{transactionId}
     * @allow (get) Any user can read fund transaction details.
     * @allow (list) Any user can list fund transactions.
     * @deny (create) No one can create fund transactions through client.
     * @deny (update) No one can update fund transactions through client.
     * @deny (delete) No one can delete fund transactions through client.
     * @principle Public read-only access; writes are not allowed.
     */
    match /funds/accounting/transactions/{transactionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for philanthropy activities.
     * @path /philanthropy/{activityId}
     * @allow (get) Any user can read philanthropy activity details.
     * @allow (list) Any user can list philanthropy activities.
     * @deny (create) No one can create philanthropy activities through client.
     * @deny (update) No one can update philanthropy activities through client.
     * @deny (delete) No one can delete philanthropy activities through client.
     * @principle Public read-only access; writes are not allowed.
     */
    match /philanthropy/{activityId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}